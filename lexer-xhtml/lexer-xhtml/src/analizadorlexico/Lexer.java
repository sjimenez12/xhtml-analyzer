/* The following code was generated by JFlex 1.4.3 on 4/8/13 9:34 PM */

package analizadorlexico;
import static analizadorlexico.Token.*;
import java_cup.runtime.*; 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/8/13 9:34 PM from the specification file
 * <tt>/home/santiago/Desktop/lexer-xhtml/src/analizadorlexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\7\1\0\1\6\1\6\22\0\1\6\1\4\1\14"+
    "\1\2\1\0\1\2\2\0\1\21\1\22\1\15\1\0\1\20\1\12"+
    "\1\2\1\25\12\1\1\3\1\17\1\11\1\16\1\13\1\47\1\2"+
    "\2\2\1\57\1\55\1\63\11\2\1\56\1\62\3\2\1\60\4\2"+
    "\1\61\1\2\4\0\1\5\1\0\1\37\1\32\1\26\1\33\1\36"+
    "\1\35\1\51\1\10\1\42\1\2\1\54\1\30\1\45\1\43\1\27"+
    "\1\41\1\53\1\46\1\40\1\31\1\44\1\50\1\64\1\52\1\34"+
    "\1\2\1\23\1\0\1\24\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\3\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\4\3\1\17\3\3\1\20\1\3\1\21\1\22"+
    "\3\3\1\23\4\3\1\24\2\3\1\25\2\0\1\26"+
    "\1\27\2\3\1\30\2\3\1\31\1\32\1\3\1\33"+
    "\4\3\1\34\2\3\1\35\1\36\1\37\1\40\21\3"+
    "\1\41\13\3\1\0\1\42\16\3\1\43\4\3\1\44"+
    "\7\3\1\45\2\3\1\46\4\3\1\47\3\3\1\50"+
    "\1\51\1\3\1\52\1\0\3\3\1\53\1\54\2\3"+
    "\1\55\4\3\1\56\1\57\1\60\10\3\1\61\3\3"+
    "\1\62\1\3\1\63\6\3\1\0\1\3\1\64\1\0"+
    "\3\3\1\65\1\66\1\67\1\70\1\3\1\71\4\3"+
    "\1\72\1\3\1\73\3\3\1\74\2\3\1\75\2\3"+
    "\1\76\1\77\1\3\1\0\1\100\3\0\2\3\1\101"+
    "\1\102\2\3\1\103\1\3\1\104\1\105\1\3\1\106"+
    "\1\107\5\3\2\0\1\64\1\110\1\111\1\112\2\3"+
    "\1\113\1\3\1\114\1\115\3\3\1\116\1\0\1\3"+
    "\1\117\1\120\1\121\2\3\1\0\1\3\1\122\1\123"+
    "\1\124\1\3\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\u0109\0\u013e"+
    "\0\65\0\u0173\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\237\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\65\0\u048e\0\u04c3\0\u04f8\0\u052d\0\237\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0173\0\65\0\65\0\u0636\0\u066b"+
    "\0\237\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\237\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\237\0\u087d\0\u08b2\0\237\0\237"+
    "\0\237\0\237\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\237\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\237\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\237"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\237\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\237\0\u1415\0\u144a\0\237"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\237\0\237\0\u1627\0\237\0\u165c\0\u1691\0\u16c6\0\u16fb"+
    "\0\237\0\237\0\u1730\0\u1765\0\237\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\237\0\237\0\237\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\237\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\237\0\u1ab5\0\237\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\237\0\237\0\237\0\237\0\u1d9b\0\237\0\u1dd0\0\u1e05"+
    "\0\u1e3a\0\u1e6f\0\237\0\u1ea4\0\237\0\u1ed9\0\u1f0e\0\u1f43"+
    "\0\237\0\u1f78\0\u1fad\0\237\0\u1fe2\0\u2017\0\u204c\0\237"+
    "\0\u2081\0\u20b6\0\237\0\u1c92\0\u20eb\0\u2120\0\u2155\0\u218a"+
    "\0\237\0\237\0\u21bf\0\u21f4\0\237\0\u2229\0\237\0\u225e"+
    "\0\u2293\0\237\0\237\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u2406\0\65\0\237\0\237\0\u243b\0\u2470"+
    "\0\237\0\u24a5\0\237\0\237\0\u24da\0\u250f\0\u2544\0\237"+
    "\0\u2579\0\u25ae\0\237\0\237\0\237\0\u25e3\0\u2618\0\u264d"+
    "\0\u2682\0\237\0\237\0\65\0\u26b7\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\2\2\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\4\1\42\1\43\1\4"+
    "\1\44\11\4\1\45\66\0\1\3\64\0\5\4\2\0"+
    "\1\4\15\0\21\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\21\4\1\0\5\4\1\46\7\4\1\0"+
    "\1\47\4\4\2\0\1\4\15\0\3\4\1\50\4\4"+
    "\1\51\7\4\1\52\1\0\15\4\4\0\1\53\60\0"+
    "\7\54\1\55\4\54\1\56\1\0\47\54\1\0\5\4"+
    "\2\0\1\4\15\0\1\4\1\57\7\4\1\60\7\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\2\4"+
    "\1\61\10\4\1\62\5\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\11\4\1\63\2\4\1\64\4\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\65\15\0\4\4"+
    "\1\66\1\67\1\70\1\71\1\4\1\72\2\4\1\73"+
    "\3\4\1\74\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\1\4\1\75\7\4\1\76\6\4\1\77\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\2\4\1\100"+
    "\1\101\1\4\1\102\6\4\1\103\4\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\1\4\1\104\16\4"+
    "\1\105\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\15\4\1\106\3\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\1\107\1\4\1\110\2\4\1\111\13\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\1\112"+
    "\2\4\1\113\4\4\1\114\2\4\1\115\2\4\1\116"+
    "\1\4\1\117\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\7\4\1\120\5\4\1\121\1\4\1\122\1\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\11\4"+
    "\1\123\7\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\2\4\1\124\16\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\10\4\1\125\10\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\10\4\1\126\1\127"+
    "\7\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\17\4\1\130\1\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\14\4\1\131\4\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\21\4\1\0\6\4\1\132"+
    "\6\4\1\0\5\4\2\0\1\4\15\0\3\4\1\133"+
    "\13\4\1\134\1\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\11\4\1\135\2\4\1\136\4\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\10\4\1\137"+
    "\10\4\1\0\15\4\12\0\1\140\53\0\5\4\2\0"+
    "\1\4\15\0\2\4\1\141\12\4\1\142\3\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\13\4\1\143"+
    "\5\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\3\4\1\144\15\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\15\4\1\145\3\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\15\4\1\146\3\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\10\4\1\147"+
    "\10\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\1\4\1\150\17\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\13\4\1\151\5\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\1\4\1\152\17\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\4\4\1\153"+
    "\13\4\1\154\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\3\4\1\155\15\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\5\4\1\156\13\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\12\4\1\157\6\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\21\4"+
    "\1\0\1\160\14\4\1\0\5\4\2\0\1\4\15\0"+
    "\20\4\1\161\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\11\4\1\162\7\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\1\163\20\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\3\4\1\164\15\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\3\4\1\165"+
    "\15\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\5\4\1\166\13\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\1\4\1\167\16\4\1\170\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\6\4\1\171\12\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\2\4"+
    "\1\172\16\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\11\4\1\173\7\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\17\4\1\174\1\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\1\175\20\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\20\4\1\176"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\13\4"+
    "\1\177\5\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\21\4\1\0\1\4\1\200\13\4\1\0\5\4"+
    "\2\0\1\4\15\0\17\4\1\201\1\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\3\4\1\202\15\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\20\4"+
    "\1\203\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\2\4\1\204\16\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\2\4\1\205\16\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\5\4\1\206\13\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\21\4\1\0"+
    "\7\4\1\207\5\4\1\0\5\4\2\0\1\4\15\0"+
    "\13\4\1\210\5\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\2\4\1\211\16\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\5\4\1\212\13\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\21\4\1\0"+
    "\1\4\1\213\13\4\1\0\5\4\2\0\1\4\15\0"+
    "\7\4\1\214\11\4\1\0\15\4\12\0\1\215\53\0"+
    "\5\4\2\0\1\4\15\0\3\4\1\216\15\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\3\4\1\217"+
    "\15\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\14\4\1\220\4\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\21\4\1\0\1\4\1\221\13\4\1\0"+
    "\5\4\2\0\1\4\15\0\21\4\1\0\4\4\1\222"+
    "\10\4\1\0\5\4\2\0\1\4\15\0\11\4\1\223"+
    "\7\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\5\4\1\224\13\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\10\4\1\225\10\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\1\4\1\226\17\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\2\4\1\227"+
    "\16\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\21\4\1\0\1\4\1\230\13\4\1\0\5\4\2\0"+
    "\1\4\15\0\2\4\1\231\16\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\6\4\1\232\12\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\10\4\1\233"+
    "\10\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\17\4\1\234\1\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\17\4\1\235\1\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\1\4\1\236\17\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\14\4\1\237"+
    "\4\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\20\4\1\240\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\13\4\1\241\5\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\14\4\1\242\4\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\2\4\1\243\16\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\10\4"+
    "\1\244\10\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\15\4\1\245\3\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\17\4\1\246\1\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\11\4\1\247\7\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\16\4"+
    "\1\250\2\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\10\4\1\251\10\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\252\15\0\11\4\1\253\7\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\12\4\1\254\6\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\16\4"+
    "\1\255\2\4\1\0\15\4\1\0\2\4\1\256\2\4"+
    "\2\0\1\4\15\0\15\4\1\257\3\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\3\4\1\260\15\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\21\4"+
    "\1\0\10\4\1\261\4\4\1\0\5\4\2\0\1\4"+
    "\1\0\1\262\13\0\21\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\3\4\1\263\15\4\1\0\15\4"+
    "\12\264\1\265\52\264\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\266\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\14\4\1\267\4\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\1\4\1\270\17\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\5\4\1\271"+
    "\13\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\6\4\1\272\12\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\3\4\1\273\15\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\10\4\1\274\10\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\10\4\1\275"+
    "\10\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\276\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\10\4\1\277\10\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\5\4\1\300\13\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\1\4\1\301"+
    "\17\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\302\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\10\4\1\303\10\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\13\4\1\304\5\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\10\4\1\305"+
    "\10\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\1\306\20\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\11\4\1\307\7\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\17\4\1\310\1\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\3\4\1\311\15\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\1\4"+
    "\1\312\17\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\14\4\1\313\4\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\10\4\1\314\10\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\2\4\1\315\7\4"+
    "\1\316\6\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\12\4\1\317\6\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\320\15\0\21\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\21\4\1\0\11\4\1\321\3\4"+
    "\36\0\1\322\27\0\5\4\2\0\1\323\15\0\21\4"+
    "\1\0\15\4\12\324\1\325\64\324\1\326\52\324\1\0"+
    "\5\4\2\0\1\4\15\0\15\4\1\327\3\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\1\4\1\330"+
    "\17\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\15\4\1\331\3\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\3\4\1\332\15\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\4\4\1\333\14\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\14\4\1\334"+
    "\4\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\15\4\1\335\3\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\12\4\1\336\6\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\3\4\1\337\15\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\3\4\1\340"+
    "\15\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\20\4\1\341\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\10\4\1\342\10\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\5\4\1\343\13\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\1\4\1\344\17\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\11\4"+
    "\1\345\7\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\13\4\1\346\5\4\1\0\15\4\1\0\2\4"+
    "\1\347\2\4\2\0\1\4\15\0\21\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\21\4\1\0\12\4"+
    "\1\350\2\4\53\0\1\351\11\0\12\324\1\352\52\324"+
    "\12\264\1\353\1\354\51\264\1\0\5\4\2\0\1\4"+
    "\15\0\3\4\1\355\15\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\15\4\1\356\3\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\1\4\1\357\17\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\15\4"+
    "\1\360\3\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\12\4\1\361\6\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\10\4\1\362\10\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\6\4\1\363\12\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\15\4"+
    "\1\364\3\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\15\4\1\365\3\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\11\4\1\366\7\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\21\4\1\0\2\4"+
    "\1\367\12\4\1\0\5\4\2\0\1\4\15\0\21\4"+
    "\1\0\13\4\1\370\1\4\44\0\1\371\20\0\12\324"+
    "\1\352\1\354\51\324\1\0\5\4\2\0\1\4\15\0"+
    "\20\4\1\372\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\21\4\1\0\1\4\1\373\13\4\1\0\5\4"+
    "\2\0\1\4\15\0\5\4\1\374\13\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\21\4\1\0\1\4"+
    "\1\375\13\4\1\0\5\4\2\0\1\4\15\0\1\376"+
    "\20\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\12\4\1\377\6\4\1\0\15\4\42\0\1\u0100\23\0"+
    "\5\4\2\0\1\4\15\0\5\4\1\u0101\13\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\10\4\1\u0102"+
    "\10\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\14\4\1\u0103\4\4\1\0\15\4\50\0\1\u0104\15\0"+
    "\5\4\2\0\1\4\15\0\10\4\1\u0105\10\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\20\4\1\u0106"+
    "\1\0\15\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\1\1\10\11"+
    "\17\1\1\11\10\1\2\0\2\11\61\1\1\0\54\1"+
    "\1\0\44\1\1\0\2\1\1\0\34\1\1\0\1\1"+
    "\3\0\22\1\2\0\1\1\1\11\14\1\1\0\6\1"+
    "\1\0\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Nodo yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 78: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(DOCTYPE, Posicion);
            //******************************
            return aux;
          }
        case 86: break;
        case 50: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(NAME, Posicion);
            //******************************
            return aux;
          }
        case 87: break;
        case 48: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(FORM, Posicion);
            //******************************
            return aux;
          }
        case 88: break;
        case 6: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(END_TAG, Posicion);
            //******************************
            return aux;
          }
        case 89: break;
        case 5: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(START_TAG, Posicion);
            //******************************
            return aux;
          }
        case 90: break;
        case 40: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(HTML, Posicion);
            //******************************
            return aux;
          }
        case 91: break;
        case 75: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ADDRESS, Posicion);
            //******************************
            return aux;
          }
        case 92: break;
        case 71: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(INPUT_METHOD, Posicion);
            //******************************
            return aux;
          }
        case 93: break;
        case 80: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(SELECTED, Posicion);
            //******************************
            return aux;
          }
        case 94: break;
        case 36: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ALTERNATIVE_NAME, Posicion);
            //******************************
            return aux;
          }
        case 95: break;
        case 67: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(INPUT_ACTION, Posicion);
            //******************************
            return aux;
          }
        case 96: break;
        case 51: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(META_DATA, Posicion);
            //******************************
            return aux;
          }
        case 97: break;
        case 18: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ITALIC_FORMATTING, Posicion);
            //******************************
            return aux;
          }
        case 98: break;
        case 84: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(HTTP_EQUIVALENT, Posicion);
            //******************************
            return aux;
          }
        case 99: break;
        case 70: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(IFRAME, Posicion);
            //******************************
            return aux;
          }
        case 100: break;
        case 12: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(LCBRACE, Posicion);
            //******************************
            return aux;
          }
        case 101: break;
        case 47: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(DEFAULT_ADDRESS, Posicion);
            //******************************
            return aux;
          }
        case 102: break;
        case 42: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(REFERENCE, Posicion);
            //******************************
            return aux;
          }
        case 103: break;
        case 8: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(SEMICOLON, Posicion);
            //******************************
            return aux;
          }
        case 104: break;
        case 3: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TEXT, Posicion);
            //******************************
            return aux;
          }
        case 105: break;
        case 66: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(IFRAME_TARGET_LINK, Posicion);
            //******************************
            return aux;
          }
        case 106: break;
        case 27: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TABLE_ITEM, Posicion);
            //******************************
            return aux;
          }
        case 107: break;
        case 64: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(HEIGHT, Posicion);
            //******************************
            return aux;
          }
        case 108: break;
        case 58: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(SCOPE, Posicion);
            //******************************
            return aux;
          }
        case 109: break;
        case 77: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(VERSION, Posicion);
            //******************************
            return aux;
          }
        case 110: break;
        case 55: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TABLE_FOOT, Posicion);
            //******************************
            return aux;
          }
        case 111: break;
        case 11: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(RPAR, Posicion);
            //******************************
            return aux;
          }
        case 112: break;
        case 43: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(LANGUAGE, Posicion);
            //******************************
            return aux;
          }
        case 113: break;
        case 49: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(BLOCK_LEVEL_INLINE, Posicion);
            //******************************
            return aux;
          }
        case 114: break;
        case 68: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(SCRIPT, Posicion);
            //******************************
            return aux;
          }
        case 115: break;
        case 34: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(COLUMN, Posicion);
            //******************************
            return aux;
          }
        case 116: break;
        case 28: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TABLE_ROW, Posicion);
            //******************************
            return aux;
          }
        case 117: break;
        case 35: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(BLOCK_LEVEL_SECTION, Posicion);
            //******************************
            return aux;
          }
        case 118: break;
        case 85: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(IFRAME_FRAMEBORDER, Posicion);
            //******************************
            return aux;
          }
        case 119: break;
        case 2: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(NUMBER, Posicion);
            //******************************
            return aux;
          }
        case 120: break;
        case 1: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ERROR, Posicion);
            //******************************
            return aux;
          }
        case 121: break;
        case 14: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(CLOSE_DECLARATION, Posicion);
            //******************************
            return aux;
          }
        case 122: break;
        case 61: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(VALUE, Posicion);
            //******************************
            return aux;
          }
        case 123: break;
        case 30: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(DEFINITION_LIST, Posicion);
            //******************************
            return aux;
          }
        case 124: break;
        case 79: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ENCODING, Posicion);
            //******************************
            return aux;
          }
        case 125: break;
        case 33: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(UNORDERED_LIST, Posicion);
            //******************************
            return aux;
          }
        case 126: break;
        case 52: 
          { lexeme=yytext(); // Agarra comentarios sin terminar
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ERROR_UNTERM_COMMENT, Posicion);
            //******************************
            return aux;
          }
        case 127: break;
        case 24: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ORDERED_LIST, Posicion);
            //******************************
            return aux;
          }
        case 128: break;
        case 53: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TABLE_HEAD, Posicion);
            //******************************
            return aux;
          }
        case 129: break;
        case 37: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(SOURCE, Posicion);
            //******************************
            return aux;
          }
        case 130: break;
        case 82: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(XML_SPACE, Posicion);
            //******************************
            return aux;
          }
        case 131: break;
        case 76: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(SUMMARY, Posicion);
            //******************************
            return aux;
          }
        case 132: break;
        case 39: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(XML, Posicion);
            //******************************
            return aux;
          }
        case 133: break;
        case 69: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(SELECT, Posicion);
            //******************************
            return aux;
          }
        case 134: break;
        case 44: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(DOCUMENT_EXTERNALSOURCE_LINK, Posicion);
            //******************************
            return aux;
          }
        case 135: break;
        case 22: 
          { lexeme=yytext(); //agarra srings invalidos
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(ERROR_UNTERM_STRING, Posicion);
            //******************************
            return aux;
          }
        case 136: break;
        case 13: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(RCBRACE, Posicion);
            //******************************
            return aux;
          }
        case 137: break;
        case 20: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(HEADING, Posicion);
            //******************************
            return aux;
          }
        case 138: break;
        case 41: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(HEAD, Posicion);
            //******************************
            return aux;
          }
        case 139: break;
        case 54: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TABLE_BODY, Posicion);
            //******************************
            return aux;
          }
        case 140: break;
        case 23: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(STRING, Posicion);
            //******************************
            return aux;
          }
        case 141: break;
        case 81: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(XML_LANGUAGE, Posicion);
            //******************************
            return aux;
          }
        case 142: break;
        case 21: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(HORIZONTAL_RULE, Posicion);
            //******************************
            return aux;
          }
        case 143: break;
        case 63: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(WIDTH, Posicion);
            //******************************
            return aux;
          }
        case 144: break;
        case 7: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(EQUALS, Posicion);
            //******************************
            return aux;
          }
        case 145: break;
        case 62: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(XMLNS, Posicion);
            //******************************
            return aux;
          }
        case 146: break;
        case 16: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(LINK, Posicion);
            //******************************
            return aux;
          }
        case 147: break;
        case 59: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(STYLE, Posicion);
            //******************************
            return aux;
          }
        case 148: break;
        case 56: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TABLE, Posicion);
            //******************************
            return aux;
          }
        case 149: break;
        case 9: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(COMA, Posicion);
            //******************************
            return aux;
          }
        case 150: break;
        case 83: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(XMLNS_XSI, Posicion);
            //******************************
            return aux;
          }
        case 151: break;
        case 74: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(CAPTION, Posicion);
            //******************************
            return aux;
          }
        case 152: break;
        case 73: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(CONTENT, Posicion);
            //******************************
            return aux;
          }
        case 153: break;
        case 19: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(META_DECLARATION, Posicion);
            //******************************
            return aux;
          }
        case 154: break;
        case 38: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(IMAGE, Posicion);
            //******************************
            return aux;
          }
        case 155: break;
        case 10: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(LPAR, Posicion);
            //******************************
            return aux;
          }
        case 156: break;
        case 46: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(BODY, Posicion);
            //******************************
            return aux;
          }
        case 157: break;
        case 25: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(LIST_ITEM, Posicion);
            //******************************
            return aux;
          }
        case 158: break;
        case 72: 
          { /* ignore */
          }
        case 159: break;
        case 29: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(BREAK, Posicion);
            //******************************
            return aux;
          }
        case 160: break;
        case 26: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TABLE_HEADER, Posicion);
            //******************************
            return aux;
          }
        case 161: break;
        case 17: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(PARRAGRAPH, Posicion);
            //******************************
            return aux;
          }
        case 162: break;
        case 45: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TYPE, Posicion);
            //******************************
            return aux;
          }
        case 163: break;
        case 65: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(OPTION, Posicion);
            //******************************
            return aux;
          }
        case 164: break;
        case 32: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(DEFINITION_LIST_DESCRIPTION, Posicion);
            //******************************
            return aux;
          }
        case 165: break;
        case 60: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(INPUT, Posicion);
            //******************************
            return aux;
          }
        case 166: break;
        case 15: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(BOLD_FORMATTING, Posicion);
            //******************************
            return aux;
          }
        case 167: break;
        case 31: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(DEFINITION_LIST_ITEM, Posicion);
            //******************************
            return aux;
          }
        case 168: break;
        case 57: 
          { lexeme=yytext();
            //*****************************
            int[] Posicion = new int[2];
            Posicion[0] = yycolumn;
            Posicion[1] = yyline;
            Nodo aux = new Nodo(TITLE, Posicion);
            //******************************
            return aux;
          }
        case 169: break;
        case 4: 
          { 
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
