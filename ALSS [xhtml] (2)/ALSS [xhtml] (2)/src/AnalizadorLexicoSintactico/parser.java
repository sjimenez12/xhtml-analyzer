
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 16 16:34:19 CST 2013
//----------------------------------------------------

package AnalizadorLexicoSintactico;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import javax.swing.JFileChooser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 16 16:34:19 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\030\010\000\002\030" +
    "\003\000\002\031\017\000\002\031\003\000\002\117\003" +
    "\000\002\117\003\000\002\117\003\000\002\117\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\032\007\000\002\032\003" +
    "\000\002\033\013\000\002\033\003\000\002\061\010\000" +
    "\002\061\006\000\002\062\010\000\002\062\010\000\002" +
    "\034\007\000\002\034\003\000\002\060\003\000\002\060" +
    "\004\000\002\057\003\000\002\113\007\000\002\115\013" +
    "\000\002\026\010\000\002\056\012\000\002\024\005\000" +
    "\002\024\002\000\002\025\005\000\002\025\002\000\002" +
    "\140\005\000\002\140\002\000\002\141\005\000\002\141" +
    "\002\000\002\130\005\000\002\130\002\000\002\142\005" +
    "\000\002\143\004\000\002\143\003\000\002\143\003\000" +
    "\002\144\003\000\002\144\003\000\002\144\003\000\002" +
    "\144\003\000\002\144\003\000\002\144\003\000\002\144" +
    "\003\000\002\144\003\000\002\044\013\000\002\100\013" +
    "\000\002\045\013\000\002\110\013\000\002\112\004\000" +
    "\002\112\004\000\002\112\003\000\002\112\002\000\002" +
    "\111\003\000\002\111\007\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\003\013\000" +
    "\002\003\013\000\002\003\013\000\002\003\013\000\002" +
    "\003\013\000\002\003\013\000\002\005\014\000\002\004" +
    "\005\000\002\004\002\000\002\077\013\000\002\076\010" +
    "\000\002\125\005\000\002\125\002\000\002\124\005\000" +
    "\002\124\002\000\002\006\003\000\002\006\004\000\002" +
    "\133\003\000\002\133\003\000\002\133\003\000\002\123" +
    "\023\000\002\042\015\000\002\075\005\000\002\075\002" +
    "\000\002\122\005\000\002\122\002\000\002\074\005\000" +
    "\002\074\002\000\002\121\005\000\002\121\002\000\002" +
    "\120\005\000\002\120\002\000\002\043\014\000\002\007" +
    "\005\000\002\007\002\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\011\013\000\002\126\013\000" +
    "\002\101\003\000\002\101\004\000\002\012\013\000\002" +
    "\010\013\000\002\013\013\000\002\014\013\000\002\046" +
    "\003\000\002\046\003\000\002\046\004\000\002\046\004" +
    "\000\002\023\015\000\002\022\003\000\002\022\004\000" +
    "\002\054\013\000\002\020\003\000\002\020\003\000\002" +
    "\020\004\000\002\020\004\000\002\021\005\000\002\017" +
    "\005\000\002\017\002\000\002\016\005\000\002\016\002" +
    "\000\002\106\005\000\002\106\002\000\002\055\003\000" +
    "\002\055\002\000\002\052\013\000\002\053\013\000\002" +
    "\127\013\000\002\015\005\000\002\015\002\000\002\050" +
    "\005\000\002\050\002\000\002\105\005\000\002\105\002" +
    "\000\002\103\005\000\002\103\002\000\002\102\005\000" +
    "\002\102\002\000\002\104\005\000\002\104\002\000\002" +
    "\051\013\000\002\134\010\000\002\131\015\000\002\027" +
    "\003\000\002\027\006\000\002\132\004\000\002\136\005" +
    "\000\002\136\002\000\002\137\005\000\002\137\002\000" +
    "\002\135\005\000\002\135\002\000\002\107\013\000\002" +
    "\150\014\000\002\040\005\000\002\070\006\000\002\070" +
    "\002\000\002\070\003\000\002\071\004\000\002\071\004" +
    "\000\002\071\004\000\002\071\004\000\002\071\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u021b\000\006\106\004\160\006\001\002\000\004\033" +
    "\010\001\002\000\004\002\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\105\011\001" +
    "\002\000\012\077\014\131\013\145\017\171\016\001\002" +
    "\000\014\077\021\110\023\131\020\145\024\171\022\001" +
    "\002\000\016\077\uff4f\106\uff4f\110\uff4f\131\uff4f\145\uff4f" +
    "\171\uff4f\001\002\000\016\077\uff4c\106\uff4c\110\uff4c\131" +
    "\uff4c\145\uff4c\171\uff4c\001\002\000\016\077\uff50\106\uff50" +
    "\110\uff50\131\uff50\145\uff50\171\uff50\001\002\000\016\077" +
    "\uff4d\106\uff4d\110\uff4d\131\uff4d\145\uff4d\171\uff4d\001\002" +
    "\000\016\077\uff4e\106\uff4e\110\uff4e\131\uff4e\145\uff4e\171" +
    "\uff4e\001\002\000\016\077\uff54\106\uff54\110\uff54\131\uff54" +
    "\145\uff54\171\uff54\001\002\000\016\077\uff53\106\uff53\110" +
    "\uff53\131\uff53\145\uff53\171\uff53\001\002\000\016\077\uff51" +
    "\106\uff51\110\uff51\131\uff51\145\uff51\171\uff51\001\002\000" +
    "\006\106\025\160\026\001\002\000\016\077\uff52\106\uff52" +
    "\110\uff52\131\uff52\145\uff52\171\uff52\001\002\000\004\105" +
    "\030\001\002\000\004\002\ufffd\001\002\000\004\002\000" +
    "\001\002\000\004\157\031\001\002\000\004\154\032\001" +
    "\002\000\012\131\033\143\037\144\035\145\036\001\002" +
    "\000\006\110\ufffc\161\ufffc\001\002\000\004\161\040\001" +
    "\002\000\006\110\ufffb\161\ufffb\001\002\000\006\110\ufffa" +
    "\161\ufffa\001\002\000\006\110\ufff9\161\ufff9\001\002\000" +
    "\004\154\041\001\002\000\004\131\042\001\002\000\004" +
    "\136\043\001\002\000\004\154\044\001\002\000\004\131" +
    "\045\001\002\000\004\110\046\001\002\000\006\106\047" +
    "\160\050\001\002\000\004\111\052\001\002\000\004\002" +
    "\uffef\001\002\000\004\002\ufffe\001\002\000\004\110\053" +
    "\001\002\000\006\106\054\160\055\001\002\000\004\141" +
    "\u0201\001\002\000\006\106\uffed\160\uffed\001\002\000\006" +
    "\106\057\160\060\001\002\000\004\034\062\001\002\000" +
    "\004\002\uffe7\001\002\000\004\002\ufff0\001\002\000\012" +
    "\110\uffda\112\063\141\uffda\152\uffda\001\002\000\004\154" +
    "\u01ff\001\002\000\004\110\076\001\002\000\066\013\uffd8" +
    "\014\uffd8\040\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\103\uffd8\104\uffd8\110\uffd8\114\uffd8" +
    "\115\uffd8\120\uffd8\122\uffd8\123\uffd8\127\uffd8\135\uffd8\137" +
    "\uffd8\140\uffd8\141\uffd8\146\uffd8\151\uffd8\152\067\001\002" +
    "\000\064\013\uffd6\014\uffd6\040\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\103\uffd6\104\uffd6" +
    "\110\uffd6\114\uffd6\115\uffd6\120\uffd6\122\uffd6\123\uffd6\127" +
    "\uffd6\135\uffd6\137\uffd6\140\uffd6\141\073\146\uffd6\151\uffd6" +
    "\001\002\000\004\154\070\001\002\000\004\131\071\001" +
    "\002\000\064\013\uffd9\014\uffd9\040\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\103\uffd9\104" +
    "\uffd9\110\uffd9\114\uffd9\115\uffd9\120\uffd9\122\uffd9\123\uffd9" +
    "\127\uffd9\135\uffd9\137\uffd9\140\uffd9\141\uffd9\146\uffd9\151" +
    "\uffd9\001\002\000\062\013\uffd5\014\uffd5\040\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\103" +
    "\uffd5\104\uffd5\110\uffd5\114\uffd5\115\uffd5\120\uffd5\122\uffd5" +
    "\123\uffd5\127\uffd5\135\uffd5\137\uffd5\140\uffd5\146\uffd5\151" +
    "\uffd5\001\002\000\004\154\074\001\002\000\004\131\075" +
    "\001\002\000\062\013\uffd7\014\uffd7\040\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\103\uffd7" +
    "\104\uffd7\110\uffd7\114\uffd7\115\uffd7\120\uffd7\122\uffd7\123" +
    "\uffd7\127\uffd7\135\uffd7\137\uffd7\140\uffd7\146\uffd7\151\uffd7" +
    "\001\002\000\004\106\110\001\002\000\006\002\uffc1\106" +
    "\uffc1\001\002\000\006\002\uffb9\106\uffb9\001\002\000\006" +
    "\002\uffe6\106\uffe6\001\002\000\006\002\uffbb\106\uffbb\001" +
    "\002\000\006\002\uff93\106\uff93\001\002\000\006\002\uffbc" +
    "\106\uffbc\001\002\000\006\002\uff95\106\uff95\001\002\000" +
    "\006\002\uffe4\106\uffe4\001\002\000\006\002\uff94\106\uff94" +
    "\001\002\000\042\004\130\005\127\006\125\007\123\010" +
    "\121\011\120\042\122\043\131\046\136\047\135\050\126" +
    "\053\124\055\117\104\132\117\134\121\133\001\002\000" +
    "\006\002\uffe8\106\110\001\002\000\006\002\uffbf\106\uffbf" +
    "\001\002\000\006\002\uffbe\106\uffbe\001\002\000\006\002" +
    "\uffbd\106\uffbd\001\002\000\006\002\uffba\106\uffba\001\002" +
    "\000\006\002\uffe5\106\uffe5\001\002\000\014\062\uffda\063" +
    "\uffda\112\063\141\uffda\152\uffda\001\002\000\012\110\uffda" +
    "\112\063\141\uffda\152\uffda\001\002\000\012\110\uffda\112" +
    "\063\141\uffda\152\uffda\001\002\000\012\110\uffda\112\063" +
    "\141\uffda\152\uffda\001\002\000\012\110\uffda\112\063\141" +
    "\uffda\152\uffda\001\002\000\012\110\uffda\112\063\141\uffda" +
    "\152\uffda\001\002\000\012\110\uffda\112\063\141\uffda\152" +
    "\uffda\001\002\000\012\110\uffda\112\063\141\uffda\152\uffda" +
    "\001\002\000\012\110\uffda\112\063\141\uffda\152\uffda\001" +
    "\002\000\012\110\uffda\112\063\141\uffda\152\uffda\001\002" +
    "\000\014\110\uffda\112\063\135\uffda\141\uffda\152\uffda\001" +
    "\002\000\004\034\261\001\002\000\014\110\uffda\112\063" +
    "\120\uffda\141\uffda\152\uffda\001\002\000\014\110\uffda\112" +
    "\063\127\uffda\141\uffda\152\uffda\001\002\000\012\110\uffda" +
    "\112\063\141\uffda\152\uffda\001\002\000\012\110\uffda\112" +
    "\063\141\uffda\152\uffda\001\002\000\004\110\140\001\002" +
    "\000\004\106\142\001\002\000\004\106\uff90\001\002\000" +
    "\004\100\147\001\002\000\004\106\145\001\002\000\004" +
    "\106\uff8f\001\002\000\006\100\147\104\146\001\002\000" +
    "\004\046\u011d\001\002\000\012\110\uffda\112\063\141\uffda" +
    "\152\uffda\001\002\000\004\110\151\001\002\000\014\077" +
    "\014\106\uffc2\131\013\145\017\171\016\001\002\000\014" +
    "\077\021\106\uffc3\131\020\145\024\171\022\001\002\000" +
    "\004\106\164\001\002\000\004\106\uffcb\001\002\000\004" +
    "\106\uffd0\001\002\000\004\106\uffcf\001\002\000\004\106" +
    "\uffca\001\002\000\004\106\uffcd\001\002\000\004\106\uffcc" +
    "\001\002\000\004\106\uffa6\001\002\000\004\106\uffa7\001" +
    "\002\000\066\004\130\005\127\006\125\007\123\010\121" +
    "\011\120\035\201\037\175\042\122\043\131\046\136\047" +
    "\135\050\126\053\124\054\174\055\117\056\172\074\202" +
    "\101\203\102\204\104\177\117\134\121\133\125\173\147" +
    "\176\150\200\001\002\000\004\106\uffa5\001\002\000\004" +
    "\106\uffc5\001\002\000\004\106\uffd1\001\002\000\004\106" +
    "\uffc4\001\002\000\004\106\uffce\001\002\000\030\040\uffda" +
    "\057\uffda\060\uffda\061\uffda\065\uffda\110\uffda\112\063\114" +
    "\uffda\141\uffda\146\uffda\152\uffda\001\002\000\016\060\uffda" +
    "\065\uffda\110\uffda\112\063\141\uffda\152\uffda\001\002\000" +
    "\012\110\uffda\112\063\141\uffda\152\uffda\001\002\000\012" +
    "\040\uffda\112\063\141\uffda\152\uffda\001\002\000\014\060" +
    "\uffda\112\063\115\uffda\141\uffda\152\uffda\001\002\000\006" +
    "\034\261\100\260\001\002\000\012\110\uffda\112\063\141" +
    "\uffda\152\uffda\001\002\000\012\104\uffda\112\063\141\uffda" +
    "\152\uffda\001\002\000\004\073\230\001\002\000\012\110" +
    "\uffda\112\063\141\uffda\152\uffda\001\002\000\012\110\uffda" +
    "\112\063\141\uffda\152\uffda\001\002\000\004\110\206\001" +
    "\002\000\014\077\014\106\211\131\013\145\017\171\016" +
    "\001\002\000\014\077\021\106\uffd2\131\020\145\024\171" +
    "\022\001\002\000\004\106\214\001\002\000\026\035\201" +
    "\037\175\054\174\056\172\074\202\101\203\102\204\125" +
    "\173\147\176\150\200\001\002\000\004\106\uffd3\001\002" +
    "\000\004\106\uffd4\001\002\000\030\035\201\037\175\054" +
    "\174\056\172\074\202\101\203\102\204\104\215\125\173" +
    "\147\176\150\200\001\002\000\004\102\216\001\002\000" +
    "\004\110\217\001\002\000\004\106\uffc7\001\002\000\004" +
    "\110\221\001\002\000\014\077\014\106\211\131\013\145" +
    "\017\171\016\001\002\000\004\106\223\001\002\000\030" +
    "\035\201\037\175\054\174\056\172\074\202\101\203\102" +
    "\204\104\224\125\173\147\176\150\200\001\002\000\004" +
    "\101\225\001\002\000\004\110\226\001\002\000\004\106" +
    "\uffc9\001\002\000\012\110\uffda\112\063\141\uffda\152\uffda" +
    "\001\002\000\004\154\231\001\002\000\012\131\232\143" +
    "\235\144\236\145\234\001\002\000\020\041\ufff8\071\ufff8" +
    "\072\ufff8\110\ufff8\112\ufff8\141\ufff8\152\ufff8\001\002\000" +
    "\012\110\uff58\112\uff58\141\uff58\152\uff58\001\002\000\020" +
    "\041\ufff6\071\ufff6\072\ufff6\110\ufff6\112\ufff6\141\ufff6\152" +
    "\ufff6\001\002\000\020\041\ufff5\071\ufff5\072\ufff5\110\ufff5" +
    "\112\ufff5\141\ufff5\152\ufff5\001\002\000\020\041\ufff7\071" +
    "\ufff7\072\ufff7\110\ufff7\112\ufff7\141\ufff7\152\ufff7\001\002" +
    "\000\004\110\240\001\002\000\014\077\014\106\211\131" +
    "\013\145\017\171\016\001\002\000\004\106\242\001\002" +
    "\000\030\035\201\037\175\054\174\056\172\074\202\101" +
    "\203\102\204\104\243\125\173\147\176\150\200\001\002" +
    "\000\004\074\244\001\002\000\004\110\245\001\002\000" +
    "\004\106\uff59\001\002\000\004\104\247\001\002\000\004" +
    "\110\250\001\002\000\004\106\uffe3\001\002\000\004\110" +
    "\252\001\002\000\014\077\014\106\211\131\013\145\017" +
    "\171\016\001\002\000\004\106\254\001\002\000\030\035" +
    "\201\037\175\054\174\056\172\074\202\101\203\102\204" +
    "\104\255\125\173\147\176\150\200\001\002\000\004\150" +
    "\256\001\002\000\004\110\257\001\002\000\004\106\uffc8" +
    "\001\002\000\004\110\271\001\002\000\004\110\262\001" +
    "\002\000\010\002\uff56\106\263\160\264\001\002\000\004" +
    "\104\266\001\002\000\006\002\uff55\106\uff55\001\002\000" +
    "\006\002\uffc0\106\uffc0\001\002\000\004\105\267\001\002" +
    "\000\004\110\270\001\002\000\006\002\uff57\106\uff57\001" +
    "\002\000\004\106\uff91\001\002\000\006\060\274\115\uff5f" +
    "\001\002\000\004\115\277\001\002\000\004\154\275\001" +
    "\002\000\004\131\276\001\002\000\020\040\uff60\061\uff60" +
    "\065\uff60\110\uff60\114\uff60\115\uff60\146\uff60\001\002\000" +
    "\004\154\300\001\002\000\004\131\301\001\002\000\004" +
    "\116\302\001\002\000\004\154\303\001\002\000\004\131" +
    "\304\001\002\000\002\001\002\000\004\110\306\001\002" +
    "\000\012\077\014\131\013\145\017\171\016\001\002\000" +
    "\014\077\021\106\310\131\020\145\024\171\022\001\002" +
    "\000\004\104\311\001\002\000\004\147\312\001\002\000" +
    "\004\110\313\001\002\000\004\106\uffa4\001\002\000\004" +
    "\040\316\001\002\000\004\104\340\001\002\000\004\154" +
    "\317\001\002\000\012\131\232\143\235\144\236\145\234" +
    "\001\002\000\010\041\uffde\071\322\072\uffde\001\002\000" +
    "\006\041\uffdc\072\331\001\002\000\004\154\323\001\002" +
    "\000\012\131\324\143\330\144\326\145\327\001\002\000" +
    "\006\041\ufff4\072\ufff4\001\002\000\006\041\uffdf\072\uffdf" +
    "\001\002\000\006\041\ufff3\072\ufff3\001\002\000\006\041" +
    "\ufff2\072\ufff2\001\002\000\006\041\ufff1\072\ufff1\001\002" +
    "\000\004\154\336\001\002\000\004\041\333\001\002\000" +
    "\004\154\334\001\002\000\004\131\335\001\002\000\004" +
    "\104\uffe0\001\002\000\012\131\324\143\330\144\326\145" +
    "\327\001\002\000\004\041\uffdd\001\002\000\004\110\341" +
    "\001\002\000\004\106\uffe1\001\002\000\004\110\343\001" +
    "\002\000\014\077\014\106\211\131\013\145\017\171\016" +
    "\001\002\000\004\106\345\001\002\000\030\035\201\037" +
    "\175\054\174\056\172\074\202\101\203\102\204\104\346" +
    "\125\173\147\176\150\200\001\002\000\004\054\347\001" +
    "\002\000\004\110\350\001\002\000\004\106\uff5a\001\002" +
    "\000\010\060\274\065\uff5f\110\uff5f\001\002\000\004\110" +
    "\360\001\002\000\006\065\355\110\uff5d\001\002\000\004" +
    "\110\uff61\001\002\000\004\154\356\001\002\000\004\131" +
    "\357\001\002\000\010\040\uff5e\110\uff5e\146\uff5e\001\002" +
    "\000\004\106\361\001\002\000\004\126\363\001\002\000" +
    "\004\106\uff65\001\002\000\014\110\uffda\112\063\140\uffda" +
    "\141\uffda\152\uffda\001\002\000\006\110\uff5b\140\365\001" +
    "\002\000\004\154\u0103\001\002\000\004\110\367\001\002" +
    "\000\012\077\014\131\013\145\017\171\016\001\002\000" +
    "\014\077\021\106\371\131\020\145\024\171\022\001\002" +
    "\000\004\104\372\001\002\000\004\126\373\001\002\000" +
    "\004\110\374\001\002\000\004\106\375\001\002\000\006" +
    "\104\u0100\126\363\001\002\000\004\106\uff63\001\002\000" +
    "\004\106\uff64\001\002\000\004\125\u0101\001\002\000\004" +
    "\110\u0102\001\002\000\004\106\uff62\001\002\000\004\131" +
    "\u0104\001\002\000\004\110\uff5c\001\002\000\022\040\uffa1" +
    "\057\u0107\060\uffa1\061\uffa1\065\uffa1\110\uffa1\114\uffa1\146" +
    "\uffa1\001\002\000\020\040\uff5f\060\274\061\uff5f\065\uff5f" +
    "\110\uff5f\114\uff5f\146\uff5f\001\002\000\004\154\u0108\001" +
    "\002\000\004\131\u0109\001\002\000\020\040\uffa2\060\uffa2" +
    "\061\uffa2\065\uffa2\110\uffa2\114\uffa2\146\uffa2\001\002\000" +
    "\016\040\uff9f\061\u010c\065\uff9f\110\uff9f\114\uff9f\146\uff9f" +
    "\001\002\000\014\040\uff9d\065\uff9d\110\uff9d\114\u0110\146" +
    "\uff9d\001\002\000\004\154\u010d\001\002\000\004\131\u010e" +
    "\001\002\000\014\040\uffa0\065\uffa0\110\uffa0\114\uffa0\146" +
    "\uffa0\001\002\000\012\040\uff5d\065\355\110\uff5d\146\uff5d" +
    "\001\002\000\004\154\u0111\001\002\000\004\131\u0112\001" +
    "\002\000\012\040\uff9e\065\uff9e\110\uff9e\146\uff9e\001\002" +
    "\000\010\040\u0114\110\uff9b\146\uff9b\001\002\000\004\154" +
    "\u011b\001\002\000\006\110\uff99\146\u0117\001\002\000\004" +
    "\110\u011a\001\002\000\004\154\u0118\001\002\000\004\131" +
    "\u0119\001\002\000\004\110\uff9a\001\002\000\004\106\uffa3" +
    "\001\002\000\004\131\u011c\001\002\000\006\110\uff9c\146" +
    "\uff9c\001\002\000\004\110\u011e\001\002\000\006\002\uff92" +
    "\106\uff92\001\002\000\004\110\u0120\001\002\000\004\106" +
    "\142\001\002\000\004\106\u0122\001\002\000\006\100\147" +
    "\104\u0123\001\002\000\004\047\u0124\001\002\000\004\110" +
    "\u0125\001\002\000\006\002\uff8e\106\uff8e\001\002\000\006" +
    "\110\uffb0\127\u0127\001\002\000\004\154\u012f\001\002\000" +
    "\004\110\u0129\001\002\000\014\077\014\106\211\131\013" +
    "\145\017\171\016\001\002\000\004\106\u012b\001\002\000" +
    "\030\035\201\037\175\054\174\056\172\074\202\101\203" +
    "\102\204\104\u012c\125\173\147\176\150\200\001\002\000" +
    "\004\117\u012d\001\002\000\004\110\u012e\001\002\000\006" +
    "\002\uffb2\106\uffb2\001\002\000\004\131\u0130\001\002\000" +
    "\004\110\uffb1\001\002\000\006\110\uff96\120\u0132\001\002" +
    "\000\004\154\u013a\001\002\000\004\110\u0134\001\002\000" +
    "\004\106\110\001\002\000\004\106\u0136\001\002\000\042" +
    "\004\130\005\127\006\125\007\123\010\121\011\120\042" +
    "\122\043\131\046\136\047\135\050\126\053\124\055\117" +
    "\104\u0137\117\134\121\133\001\002\000\006\034\261\121" +
    "\u0138\001\002\000\004\110\u0139\001\002\000\006\002\uff98" +
    "\106\uff98\001\002\000\012\131\033\143\037\144\035\145" +
    "\036\001\002\000\004\110\uff97\001\002\000\006\110\uff78" +
    "\135\u013e\001\002\000\004\110\u0141\001\002\000\004\154" +
    "\u013f\001\002\000\004\131\u0140\001\002\000\004\110\uff79" +
    "\001\002\000\004\106\u0142\001\002\000\004\153\u018e\001" +
    "\002\000\004\106\u0145\001\002\000\004\106\uff77\001\002" +
    "\000\004\044\u014a\001\002\000\004\106\u0148\001\002\000" +
    "\004\106\uff85\001\002\000\006\044\u014a\104\u014b\001\002" +
    "\000\004\106\uff84\001\002\000\016\013\uffda\014\uffda\110" +
    "\uffda\112\063\141\uffda\152\uffda\001\002\000\004\043\u014c" +
    "\001\002\000\004\110\u014d\001\002\000\006\002\uff86\106" +
    "\uff86\001\002\000\010\013\uff7c\014\u0176\110\uff7c\001\002" +
    "\000\004\110\u0150\001\002\000\004\106\u0151\001\002\000" +
    "\006\045\u0159\165\u0158\001\002\000\004\106\uff82\001\002" +
    "\000\004\106\uff81\001\002\000\004\106\u0155\001\002\000" +
    "\010\045\u0159\104\u015a\165\u0158\001\002\000\004\106\uff80" +
    "\001\002\000\004\106\uff7f\001\002\000\032\013\uffda\014" +
    "\uffda\064\uffda\103\uffda\110\uffda\112\063\122\uffda\123\uffda" +
    "\137\uffda\141\uffda\151\uffda\152\uffda\001\002\000\032\013" +
    "\uffda\014\uffda\064\uffda\103\uffda\110\uffda\112\063\122\uffda" +
    "\123\uffda\137\uffda\141\uffda\151\uffda\152\uffda\001\002\000" +
    "\004\044\u015b\001\002\000\004\110\u015c\001\002\000\004" +
    "\106\uff83\001\002\000\004\110\u017f\001\002\000\024\013" +
    "\uff71\014\uff71\064\uff71\103\uff71\110\uff71\122\uff71\123\u015f" +
    "\137\uff71\151\uff71\001\002\000\004\154\u017d\001\002\000" +
    "\022\013\uff6f\014\uff6f\064\uff6f\103\uff6f\110\uff6f\122\u0162" +
    "\137\uff6f\151\uff6f\001\002\000\020\013\uff6d\014\uff6d\064" +
    "\uff6d\103\uff6d\110\uff6d\137\uff6d\151\u0166\001\002\000\004" +
    "\154\u0163\001\002\000\004\131\u0164\001\002\000\020\013" +
    "\uff70\014\uff70\064\uff70\103\uff70\110\uff70\137\uff70\151\uff70" +
    "\001\002\000\016\013\uff67\014\uff67\064\uff67\103\uff67\110" +
    "\uff67\137\u016a\001\002\000\004\154\u0167\001\002\000\004" +
    "\131\u0168\001\002\000\016\013\uff6e\014\uff6e\064\uff6e\103" +
    "\uff6e\110\uff6e\137\uff6e\001\002\000\014\013\uff6b\014\uff6b" +
    "\064\uff6b\103\u016e\110\uff6b\001\002\000\004\154\u016b\001" +
    "\002\000\004\131\u016c\001\002\000\014\013\uff68\014\uff68" +
    "\064\uff68\103\uff68\110\uff68\001\002\000\012\013\uff69\014" +
    "\uff69\064\u0172\110\uff69\001\002\000\004\154\u016f\001\002" +
    "\000\004\131\u0170\001\002\000\012\013\uff6c\014\uff6c\064" +
    "\uff6c\110\uff6c\001\002\000\010\013\uff7c\014\u0176\110\uff7c" +
    "\001\002\000\004\154\u0173\001\002\000\004\131\u0174\001" +
    "\002\000\010\013\uff6a\014\uff6a\110\uff6a\001\002\000\006" +
    "\013\u0179\110\uff7a\001\002\000\004\154\u0177\001\002\000" +
    "\004\131\u0178\001\002\000\006\013\uff7d\110\uff7d\001\002" +
    "\000\004\154\u017b\001\002\000\004\110\uff73\001\002\000" +
    "\004\131\u017c\001\002\000\004\110\uff7b\001\002\000\004" +
    "\131\u017e\001\002\000\022\013\uff72\014\uff72\064\uff72\103" +
    "\uff72\110\uff72\122\uff72\137\uff72\151\uff72\001\002\000\014" +
    "\077\014\106\uffc2\131\013\145\017\171\016\001\002\000" +
    "\004\106\u0181\001\002\000\066\004\130\005\127\006\125" +
    "\007\123\010\121\011\120\035\201\037\175\042\122\043" +
    "\131\046\136\047\135\050\126\053\124\054\174\055\117" +
    "\056\172\074\202\101\203\102\204\104\u0182\117\134\121" +
    "\133\125\173\147\176\150\200\001\002\000\006\034\261" +
    "\045\u0183\001\002\000\004\110\u0184\001\002\000\004\106" +
    "\uff75\001\002\000\004\110\u0186\001\002\000\014\077\014" +
    "\106\uffc2\131\013\145\017\171\016\001\002\000\004\106" +
    "\u0188\001\002\000\066\004\130\005\127\006\125\007\123" +
    "\010\121\011\120\035\201\037\175\042\122\043\131\046" +
    "\136\047\135\050\126\053\124\054\174\055\117\056\172" +
    "\074\202\101\203\102\204\104\u0189\117\134\121\133\125" +
    "\173\147\176\150\200\001\002\000\006\034\261\165\u018a" +
    "\001\002\000\004\110\u018b\001\002\000\004\106\uff74\001" +
    "\002\000\006\013\u0179\110\uff7a\001\002\000\004\110\uff7e" +
    "\001\002\000\012\110\uffda\112\063\141\uffda\152\uffda\001" +
    "\002\000\004\110\u0190\001\002\000\014\077\014\106\211" +
    "\131\013\145\017\171\016\001\002\000\004\106\u0192\001" +
    "\002\000\030\035\201\037\175\054\174\056\172\074\202" +
    "\101\203\102\204\104\u0193\125\173\147\176\150\200\001" +
    "\002\000\004\153\u0194\001\002\000\004\110\u0195\001\002" +
    "\000\004\106\uff66\001\002\000\004\110\u0197\001\002\000" +
    "\014\077\014\106\211\131\013\145\017\171\016\001\002" +
    "\000\004\106\u0199\001\002\000\030\035\201\037\175\054" +
    "\174\056\172\074\202\101\203\102\204\104\u019a\125\173" +
    "\147\176\150\200\001\002\000\004\004\u019b\001\002\000" +
    "\004\110\u019c\001\002\000\006\002\uffb8\106\uffb8\001\002" +
    "\000\004\110\u019e\001\002\000\014\077\014\106\211\131" +
    "\013\145\017\171\016\001\002\000\004\106\u01a0\001\002" +
    "\000\030\035\201\037\175\054\174\056\172\074\202\101" +
    "\203\102\204\104\u01a1\125\173\147\176\150\200\001\002" +
    "\000\004\005\u01a2\001\002\000\004\110\u01a3\001\002\000" +
    "\006\002\uffb7\106\uffb7\001\002\000\004\110\u01a5\001\002" +
    "\000\004\106\u01a8\001\002\000\004\106\u01bb\001\002\000" +
    "\004\106\uff89\001\002\000\006\051\u01ab\052\u01aa\001\002" +
    "\000\004\106\uff8a\001\002\000\012\110\uffda\112\063\141" +
    "\uffda\152\uffda\001\002\000\012\110\uffda\112\063\141\uffda" +
    "\152\uffda\001\002\000\004\110\u01ad\001\002\000\014\077" +
    "\014\106\211\131\013\145\017\171\016\001\002\000\004" +
    "\106\u01af\001\002\000\030\035\201\037\175\054\174\056" +
    "\172\074\202\101\203\102\204\104\u01b0\125\173\147\176" +
    "\150\200\001\002\000\004\051\u01b1\001\002\000\004\110" +
    "\u01b2\001\002\000\004\106\uff8c\001\002\000\004\110\u01b4" +
    "\001\002\000\014\077\014\106\uffc2\131\013\145\017\171" +
    "\016\001\002\000\004\106\u01b6\001\002\000\066\004\130" +
    "\005\127\006\125\007\123\010\121\011\120\035\201\037" +
    "\175\042\122\043\131\046\136\047\135\050\126\053\124" +
    "\054\174\055\117\056\172\074\202\101\203\102\204\104" +
    "\u01b7\117\134\121\133\125\173\147\176\150\200\001\002" +
    "\000\006\034\261\052\u01b8\001\002\000\004\110\u01b9\001" +
    "\002\000\004\106\uff8b\001\002\000\004\106\uff87\001\002" +
    "\000\010\051\u01ab\052\u01aa\104\u01bd\001\002\000\004\106" +
    "\uff88\001\002\000\004\050\u01be\001\002\000\004\110\u01bf" +
    "\001\002\000\006\002\uff8d\106\uff8d\001\002\000\004\110" +
    "\u01c1\001\002\000\014\077\014\106\211\131\013\145\017" +
    "\171\016\001\002\000\004\106\u01c3\001\002\000\030\035" +
    "\201\037\175\054\174\056\172\074\202\101\203\102\204" +
    "\104\u01c4\125\173\147\176\150\200\001\002\000\004\006" +
    "\u01c5\001\002\000\004\110\u01c6\001\002\000\006\002\uffb6" +
    "\106\uffb6\001\002\000\004\110\u01c8\001\002\000\014\077" +
    "\014\106\uffc2\131\013\145\017\171\016\001\002\000\004" +
    "\106\u01ca\001\002\000\066\004\130\005\127\006\125\007" +
    "\123\010\121\011\120\035\201\037\175\042\122\043\131" +
    "\046\136\047\135\050\126\053\124\054\174\055\117\056" +
    "\172\074\202\101\203\102\204\104\u01cb\117\134\121\133" +
    "\125\173\147\176\150\200\001\002\000\006\034\261\053" +
    "\u01cc\001\002\000\004\110\u01cd\001\002\000\006\002\uffc6" +
    "\106\uffc6\001\002\000\004\110\u01cf\001\002\000\014\077" +
    "\014\106\211\131\013\145\017\171\016\001\002\000\004" +
    "\106\u01d1\001\002\000\030\035\201\037\175\054\174\056" +
    "\172\074\202\101\203\102\204\104\u01d2\125\173\147\176" +
    "\150\200\001\002\000\004\007\u01d3\001\002\000\004\110" +
    "\u01d4\001\002\000\006\002\uffb5\106\uffb5\001\002\000\004" +
    "\110\u01d6\001\002\000\014\077\014\106\211\131\013\145" +
    "\017\171\016\001\002\000\004\106\u01d8\001\002\000\030" +
    "\035\201\037\175\054\174\056\172\074\202\101\203\102" +
    "\204\104\u01d9\125\173\147\176\150\200\001\002\000\004" +
    "\042\u01da\001\002\000\004\110\u01db\001\002\000\006\002" +
    "\uffe2\106\uffe2\001\002\000\004\110\u01dd\001\002\000\014" +
    "\077\014\106\211\131\013\145\017\171\016\001\002\000" +
    "\004\106\u01df\001\002\000\030\035\201\037\175\054\174" +
    "\056\172\074\202\101\203\102\204\104\u01e0\125\173\147" +
    "\176\150\200\001\002\000\004\010\u01e1\001\002\000\004" +
    "\110\u01e2\001\002\000\006\002\uffb4\106\uffb4\001\002\000" +
    "\004\110\u01e4\001\002\000\014\077\014\106\211\131\013" +
    "\145\017\171\016\001\002\000\004\106\u01e6\001\002\000" +
    "\030\035\201\037\175\054\174\056\172\074\202\101\203" +
    "\102\204\104\u01e7\125\173\147\176\150\200\001\002\000" +
    "\004\011\u01e8\001\002\000\004\110\u01e9\001\002\000\006" +
    "\002\uffb3\106\uffb3\001\002\000\006\062\uffac\063\u01f4\001" +
    "\002\000\004\110\u01ec\001\002\000\004\106\110\001\002" +
    "\000\004\106\u01f0\001\002\000\004\106\uffa9\001\002\000" +
    "\004\106\uffa8\001\002\000\042\004\130\005\127\006\125" +
    "\007\123\010\121\011\120\042\122\043\131\046\136\047" +
    "\135\050\126\053\124\055\117\104\u01f1\117\134\121\133" +
    "\001\002\000\006\034\261\055\u01f2\001\002\000\004\110" +
    "\u01f3\001\002\000\006\002\uffaf\106\uffaf\001\002\000\004" +
    "\154\u01fd\001\002\000\004\062\u01f6\001\002\000\004\154" +
    "\u01f7\001\002\000\004\131\u01f8\001\002\000\006\012\u01f9" +
    "\110\uffaa\001\002\000\004\154\u01fb\001\002\000\004\110" +
    "\uffae\001\002\000\004\131\u01fc\001\002\000\004\110\uffab" +
    "\001\002\000\004\131\u01fe\001\002\000\004\062\uffad\001" +
    "\002\000\004\131\u0200\001\002\000\066\013\uffdb\014\uffdb" +
    "\040\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\103\uffdb\104\uffdb\110\uffdb\114\uffdb\115\uffdb" +
    "\120\uffdb\122\uffdb\123\uffdb\127\uffdb\135\uffdb\137\uffdb\140" +
    "\uffdb\141\uffdb\146\uffdb\151\uffdb\152\uffdb\001\002\000\004" +
    "\110\u0202\001\002\000\012\077\014\131\013\145\017\171" +
    "\016\001\002\000\014\077\021\106\u0204\131\020\145\024" +
    "\171\022\001\002\000\004\104\u0205\001\002\000\004\141" +
    "\u0206\001\002\000\004\110\u0207\001\002\000\004\106\u0208" +
    "\001\002\000\006\027\u020b\104\u020a\001\002\000\006\106" +
    "\uffee\160\uffee\001\002\000\004\111\u021c\001\002\000\006" +
    "\060\u020e\130\u020d\001\002\000\004\104\u0219\001\002\000" +
    "\004\154\u0214\001\002\000\004\154\u020f\001\002\000\004" +
    "\131\u0210\001\002\000\004\134\u0211\001\002\000\004\154" +
    "\u0212\001\002\000\004\131\u0213\001\002\000\004\104\uffe9" +
    "\001\002\000\004\131\u0215\001\002\000\004\134\u0216\001" +
    "\002\000\004\154\u0217\001\002\000\004\131\u0218\001\002" +
    "\000\004\104\uffea\001\002\000\004\110\u021a\001\002\000" +
    "\004\106\u0208\001\002\000\006\106\uffec\160\uffec\001\002" +
    "\000\004\110\u021d\001\002\000\006\106\uffeb\160\uffeb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u021b\000\004\030\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\071\011\072\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\140\064\142\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\141\065\001\001\000\004\130\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\077\005\114\010\102\011\104\012" +
    "\106\023\112\043\103\047\113\057\100\060\110\077\101" +
    "\110\076\111\105\115\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\077" +
    "\005\114\010\102\011\104\012\106\023\112\043\103\047" +
    "\113\057\115\077\101\110\076\111\105\115\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\076\u01ea\140\064" +
    "\142\u01e9\001\001\000\006\140\064\142\u01e2\001\001\000" +
    "\006\140\064\142\u01db\001\001\000\006\140\064\142\u01d4" +
    "\001\001\000\006\140\064\142\u01cd\001\001\000\006\140" +
    "\064\142\u01c6\001\001\000\006\140\064\142\u01bf\001\001" +
    "\000\006\140\064\142\u01a3\001\001\000\006\140\064\142" +
    "\u019c\001\001\000\006\140\064\142\u0195\001\001\000\006" +
    "\140\064\142\u013b\001\001\000\002\001\001\000\006\140" +
    "\064\142\u0130\001\001\000\006\140\064\142\u0125\001\001" +
    "\000\006\140\064\142\u011e\001\001\000\006\140\064\142" +
    "\136\001\001\000\002\001\001\000\006\101\142\126\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\126" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\140\064\142\147\001\001\000\002\001" +
    "\001\000\010\071\151\072\014\112\152\001\001\000\002" +
    "\001\001\000\062\003\077\005\114\010\102\011\104\012" +
    "\106\023\112\026\170\042\161\043\103\044\156\045\160" +
    "\047\113\077\101\100\153\107\157\110\076\111\167\113" +
    "\154\115\111\123\164\133\166\134\162\144\165\150\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\140\064\142\u0104\001" +
    "\001\000\006\140\064\142\350\001\001\000\006\140\064" +
    "\142\341\001\001\000\006\140\064\142\313\001\001\000" +
    "\006\140\064\142\271\001\001\000\002\001\001\000\006" +
    "\140\064\142\250\001\001\000\006\140\064\142\245\001" +
    "\001\000\004\040\226\001\001\000\006\140\064\142\217" +
    "\001\001\000\006\140\064\142\204\001\001\000\002\001" +
    "\001\000\040\026\170\042\161\044\156\045\160\071\206" +
    "\072\014\100\153\107\157\113\154\123\164\133\166\134" +
    "\162\143\207\144\211\150\155\001\001\000\002\001\001" +
    "\000\032\026\170\042\161\044\156\045\160\100\153\107" +
    "\157\113\154\123\164\133\166\134\162\144\212\150\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\026\170\042" +
    "\161\044\156\045\160\071\206\072\014\100\153\107\157" +
    "\113\154\123\164\133\166\134\162\143\221\144\211\150" +
    "\155\001\001\000\032\026\170\042\161\044\156\045\160" +
    "\100\153\107\157\113\154\123\164\133\166\134\162\144" +
    "\212\150\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\140\064\142" +
    "\236\001\001\000\002\001\001\000\004\037\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\026\170\042\161\044\156\045\160\071\206\072\014\100" +
    "\153\107\157\113\154\123\164\133\166\134\162\143\240" +
    "\144\211\150\155\001\001\000\032\026\170\042\161\044" +
    "\156\045\160\100\153\107\157\113\154\123\164\133\166" +
    "\134\162\144\212\150\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\026\170\042\161\044\156\045\160\071\206" +
    "\072\014\100\153\107\157\113\154\123\164\133\166\134" +
    "\162\143\252\144\211\150\155\001\001\000\032\026\170" +
    "\042\161\044\156\045\160\100\153\107\157\113\154\123" +
    "\164\133\166\134\162\144\212\150\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\136\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\304\001\001" +
    "\000\002\001\001\000\006\071\306\072\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\317\001\001" +
    "\000\004\024\320\001\001\000\004\025\331\001\001\000" +
    "\002\001\001\000\004\002\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\026\170\042\161\044" +
    "\156\045\160\071\206\072\014\100\153\107\157\113\154" +
    "\123\164\133\166\134\162\143\343\144\211\150\155\001" +
    "\001\000\032\026\170\042\161\044\156\045\160\100\153" +
    "\107\157\113\154\123\164\133\166\134\162\144\212\150" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\132\351\136\352\001" +
    "\001\000\002\001\001\000\004\137\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\131\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\140\064\142\363\001\001\000\004\135" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\071\367\072\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\376" +
    "\131\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\u0105\001\001\000\004\136\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\u010a\001" +
    "\001\000\004\074\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\137\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0114\001\001\000\002\001\001\000\004\120\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\101\u0120\126\140\001\001\000\004\126" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\026\170\042\161" +
    "\044\156\045\160\071\206\072\014\100\153\107\157\113" +
    "\154\123\164\133\166\134\162\143\u0129\144\211\150\155" +
    "\001\001\000\032\026\170\042\161\044\156\045\160\100" +
    "\153\107\157\113\154\123\164\133\166\134\162\144\212" +
    "\150\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\077\005\114\010\102\011\104" +
    "\012\106\023\112\043\103\047\113\057\100\060\u0134\077" +
    "\101\110\076\111\105\115\111\001\001\000\034\003\077" +
    "\005\114\010\102\011\104\012\106\023\112\043\103\047" +
    "\113\057\115\077\101\110\076\111\105\115\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\u013a\001\001\000\002\001\001" +
    "\000\004\106\u013c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u0143" +
    "\055\u0142\001\001\000\002\001\001\000\006\022\u0145\054" +
    "\u0146\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u0148\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\u014e\140\064\142\u014d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u018b\001\001\000\002\001\001\000\010\020\u0153" +
    "\052\u0152\053\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\u0156\053\u0155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\127\u0184\140\064\142\u015d\001\001\000\010\127\u015c" +
    "\140\064\142\u015d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u015f" +
    "\001\001\000\002\001\001\000\004\050\u0160\001\001\000" +
    "\004\105\u0164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\u0168\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\u016c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u0174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0179\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\071\151\072\014\112\u017f\001\001\000\062" +
    "\003\077\005\114\010\102\011\104\012\106\023\112\026" +
    "\170\042\161\043\103\044\156\045\160\047\113\077\101" +
    "\100\153\107\157\110\076\111\167\113\154\115\111\123" +
    "\164\133\166\134\162\144\165\150\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\071\151\072\014\112\u0186" +
    "\001\001\000\062\003\077\005\114\010\102\011\104\012" +
    "\106\023\112\026\170\042\161\043\103\044\156\045\160" +
    "\047\113\077\101\100\153\107\157\110\076\111\167\113" +
    "\154\115\111\123\164\133\166\134\162\144\165\150\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u018c\001\001\000\002" +
    "\001\001\000\006\140\064\142\u018e\001\001\000\002\001" +
    "\001\000\040\026\170\042\161\044\156\045\160\071\206" +
    "\072\014\100\153\107\157\113\154\123\164\133\166\134" +
    "\162\143\u0190\144\211\150\155\001\001\000\032\026\170" +
    "\042\161\044\156\045\160\100\153\107\157\113\154\123" +
    "\164\133\166\134\162\144\212\150\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\026\170\042\161\044\156" +
    "\045\160\071\206\072\014\100\153\107\157\113\154\123" +
    "\164\133\166\134\162\143\u0197\144\211\150\155\001\001" +
    "\000\032\026\170\042\161\044\156\045\160\100\153\107" +
    "\157\113\154\123\164\133\166\134\162\144\212\150\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\026\170" +
    "\042\161\044\156\045\160\071\206\072\014\100\153\107" +
    "\157\113\154\123\164\133\166\134\162\143\u019e\144\211" +
    "\150\155\001\001\000\032\026\170\042\161\044\156\045" +
    "\160\100\153\107\157\113\154\123\164\133\166\134\162" +
    "\144\212\150\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\u01a8\014\u01a6\046\u01a5\001\001\000\006\013" +
    "\u01bb\014\u01b9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\140\064\142\u01b2\001\001\000" +
    "\006\140\064\142\u01ab\001\001\000\002\001\001\000\040" +
    "\026\170\042\161\044\156\045\160\071\206\072\014\100" +
    "\153\107\157\113\154\123\164\133\166\134\162\143\u01ad" +
    "\144\211\150\155\001\001\000\032\026\170\042\161\044" +
    "\156\045\160\100\153\107\157\113\154\123\164\133\166" +
    "\134\162\144\212\150\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\071\151\072\014\112\u01b4\001\001\000" +
    "\062\003\077\005\114\010\102\011\104\012\106\023\112" +
    "\026\170\042\161\043\103\044\156\045\160\047\113\077" +
    "\101\100\153\107\157\110\076\111\167\113\154\115\111" +
    "\123\164\133\166\134\162\144\165\150\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\026\170\042\161\044\156\045" +
    "\160\071\206\072\014\100\153\107\157\113\154\123\164" +
    "\133\166\134\162\143\u01c1\144\211\150\155\001\001\000" +
    "\032\026\170\042\161\044\156\045\160\100\153\107\157" +
    "\113\154\123\164\133\166\134\162\144\212\150\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\071\151\072" +
    "\014\112\u01c8\001\001\000\062\003\077\005\114\010\102" +
    "\011\104\012\106\023\112\026\170\042\161\043\103\044" +
    "\156\045\160\047\113\077\101\100\153\107\157\110\076" +
    "\111\167\113\154\115\111\123\164\133\166\134\162\144" +
    "\165\150\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\026\170\042\161\044\156\045\160\071\206\072\014" +
    "\100\153\107\157\113\154\123\164\133\166\134\162\143" +
    "\u01cf\144\211\150\155\001\001\000\032\026\170\042\161" +
    "\044\156\045\160\100\153\107\157\113\154\123\164\133" +
    "\166\134\162\144\212\150\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\026\170\042\161\044\156\045\160" +
    "\071\206\072\014\100\153\107\157\113\154\123\164\133" +
    "\166\134\162\143\u01d6\144\211\150\155\001\001\000\032" +
    "\026\170\042\161\044\156\045\160\100\153\107\157\113" +
    "\154\123\164\133\166\134\162\144\212\150\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\026\170\042\161" +
    "\044\156\045\160\071\206\072\014\100\153\107\157\113" +
    "\154\123\164\133\166\134\162\143\u01dd\144\211\150\155" +
    "\001\001\000\032\026\170\042\161\044\156\045\160\100" +
    "\153\107\157\113\154\123\164\133\166\134\162\144\212" +
    "\150\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\026\170\042\161\044\156\045\160\071\206\072\014\100" +
    "\153\107\157\113\154\123\164\133\166\134\162\143\u01e4" +
    "\144\211\150\155\001\001\000\032\026\170\042\161\044" +
    "\156\045\160\100\153\107\157\113\154\123\164\133\166" +
    "\134\162\144\212\150\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u01f4\001\001\000\002\001\001\000\034\003\077\005" +
    "\114\006\u01ec\010\102\011\104\012\106\023\112\043\103" +
    "\047\113\077\101\110\076\111\u01ed\115\111\001\001\000" +
    "\032\003\077\005\114\010\102\011\104\012\106\023\112" +
    "\043\103\047\113\077\101\110\076\111\u01ee\115\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\124\u01f9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\071\u0202\072\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u0208\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u020b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u021a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Node> mainScope = new ArrayList<Node>(); 
    public ArrayList<Node> parametros = new ArrayList<Node> ();
    public ArrayList<Node> parametrosImg = new ArrayList<Node> ();

    public Symbol getCur_token() {
            return cur_token;
        }
     
    public void syntax_error(Symbol s){
        report_error("Error de sintaxis. Linea: " + (s.right + 1) +
        " Columna: " + s.left/(s.right + 1) + ". Texto: \"" + s.value + "\"", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws
    java.lang.Exception {
        report_fatal_error("", null);
    } 

    public Node getLastInserted (){
        Node aux = mainScope.get(mainScope.size() - 1);
        return aux;
    }

    public void printScope (){
        for (Node x : mainScope) {
                    if (x != null) {
                        String label = x.getLabel();
                        int row = x.getRow();
                        int col = x.getColumn();
                        System.out.println(label + " (Linea: " + row + "  Columna: " + col+ ")");

                        if (x.getParametros() != null) {
                            for (Node y : x.getParametros()) {
                                String label2 = y.getLabel();
                                String value = y.getValue();                  
                                System.out.println("└" + label2 + " =" + value );
                            }
                        }
                    }
                }
      }

 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



    public void checkType(String given, String expected, int linea){
    System.out.println("......................" );
    System.out.println("Error semantico en linea = "+ linea + " Se esperaba tipo="+ expected+"  " +"y se encontro=" + given );
    System.out.println("......................" );
    }

Quicksort m = new Quicksort();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // texto2 ::= TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // texto2 ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // texto2 ::= STRINGURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // texto2 ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // texto ::= texto2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // texto ::= texto NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // texto ::= texto STRINGURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // texto ::= texto TEXT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // texto ::= texto STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // endHtml ::= ERROR 
            {
              Object RESULT =null;
		System.out.println ("Error lexico" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endHtml",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // endHtml ::= 
            {
              Object RESULT =null;
		System.out.println ("Error sintactico en la sentencia del html");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endHtml",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // endHtml ::= START_TAG CLOSE_DECLARATION HTML END_TAG 
            {
              Object RESULT =null;
		m.sort(parser.mainScope);parser.printScope();
System.out.println("=================================================================================");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endHtml",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // reference ::= REFERENCE EQUALS stringDir 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
            par1.setValue (s1.toString());
            RESULT=par1;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // linkDeclaration ::= START_TAG LINK reference commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION LINK END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		

                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
ArrayList<Node> parametrotemp = new ArrayList<Node> ((ArrayList)at);
 parametrotemp.add((Node)r);

                     aux.setParametros (parametrotemp);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linkDeclaration",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // spanDeclaration ::= START_TAG BLOCK_LEVEL_INLINE commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION BLOCK_LEVEL_INLINE END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros ((ArrayList)at);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spanDeclaration",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // selectedOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectedOp",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // selectedOp ::= SELECTED EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectedOp",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sizeOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sizeOp",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sizeOp ::= SIZE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sizeOp",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // nameOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameOp",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // nameOp ::= NAME EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nameOp",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // selectAtributes ::= nameOp sizeOp 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectAtributes",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // optionOp ::= START_TAG CLOSE_DECLARATION SELECT END_TAG 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // optionOp ::= option 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // option ::= START_TAG OPTION commonAtributes selectedOp END_TAG texto START_TAG CLOSE_DECLARATION OPTION END_TAG optionOp 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // selectDecl ::= START_TAG SELECT commonAtributes selectAtributes END_TAG option 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectDecl",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // caption ::= START_TAG CAPTION commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION CAPTION END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caption",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // scopeAtribute ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scopeAtribute",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // scopeAtribute ::= SCOPE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scopeAtribute",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // colspanOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colspanOp",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // colspanOp ::= COLSPAN EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colspanOp",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // rowspanOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rowspanOp",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // rowspanOp ::= ROWSPAN EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rowspanOp",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // headersOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headersOp",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // headersOp ::= HEADERS EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headersOp",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // axisOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axisOp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // axisOp ::= AXIS EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axisOp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // abbrOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("abbrOp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // abbrOp ::= ABBR EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("abbrOp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cellAtributes ::= commonAtributes abbrOp axisOp headersOp scopeAtribute rowspanOp colspanOp cellHalign cellValign 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cellAtributes",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // th ::= START_TAG TABLE_HEADER cellAtributes END_TAG flowModel START_TAG CLOSE_DECLARATION TABLE_HEADER END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("th",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // td ::= START_TAG TABLE_ITEM cellAtributes END_TAG flowModel START_TAG CLOSE_DECLARATION TABLE_ITEM END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("td",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // captionOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("captionOp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // captionOp ::= caption 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("captionOp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // summary ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("summary",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // summary ::= SUMMARY EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                RESULT=par1;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("summary",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cellValign ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cellValign",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cellValign ::= VALIGN EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cellValign",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cellHalign ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cellHalign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cellHalign ::= ALIGN EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cellHalign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // trAtributes ::= commonAtributes cellHalign cellValign 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trAtributes",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // thORtd ::= thORtd td 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("thORtd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // thORtd ::= thORtd th 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("thORtd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // thORtd ::= td 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("thORtd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // thORtd ::= th 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("thORtd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tr ::= START_TAG TABLE_ROW trAtributes END_TAG thORtd START_TAG CLOSE_DECLARATION TABLE_ROW END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // trPlus ::= trPlus tr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trPlus",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // trPlus ::= tr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trPlus",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // table ::= START_TAG TABLE commonAtributes summary END_TAG captionOp trPlus START_TAG CLOSE_DECLARATION TABLE END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                  Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                  this.parser.parametros= new ArrayList<Node>((ArrayList)at);
                  if((Node)s!=null)
                  this.parser.parametros.add((Node)s);
                  aux.setParametros (this.parser.parametros);
                  this.parser.mainScope.add (aux);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // dtORdd ::= dtORdd dd 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dtORdd",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // dtORdd ::= dtORdd dt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dtORdd",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dtORdd ::= dd 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dtORdd",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dtORdd ::= dt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dtORdd",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dd ::= START_TAG DEFINITION_LIST_DESCRIPTION commonAtributes END_TAG flowModel START_TAG CLOSE_DECLARATION DEFINITION_LIST_DESCRIPTION END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                    Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dd",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // dt ::= START_TAG DEFINITION_LIST_ITEM commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION DEFINITION_LIST_ITEM END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                    Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dl ::= START_TAG DEFINITION_LIST commonAtributes END_TAG dtORdd START_TAG CLOSE_DECLARATION DEFINITION_LIST END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ol ::= START_TAG ORDERED_LIST commonAtributes END_TAG liPlus START_TAG CLOSE_DECLARATION ORDERED_LIST END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ol",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // liPlus ::= liPlus li 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liPlus",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // liPlus ::= li 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liPlus",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // li ::= START_TAG LIST_ITEM commonAtributes END_TAG flowModel START_TAG CLOSE_DECLARATION LIST_ITEM END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ul ::= START_TAG UNORDERED_LIST commonAtributes END_TAG liPlus START_TAG CLOSE_DECLARATION UNORDERED_LIST END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros (this.parser.parametros);
                     this.parser.mainScope.add (aux);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ul",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // listClass ::= dl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listClass",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // listClass ::= ol 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listClass",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // listClass ::= ul 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listClass",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cite ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cite",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cite ::= CITE EQUALS stringUrl 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1.toString());
                RESULT=par1;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cite",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // blockquote ::= START_TAG BLOCKQUOTE commonAtributes cite END_TAG blockModel START_TAG CLOSE_DECLARATION BLOCKQUOTE END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                
                     ArrayList<Node> parametrotemp = new ArrayList<Node> ((ArrayList)at);

                     if((Node)c!=null)
                     parametrotemp.add((Node)c);

                     aux.setParametros (parametrotemp);
                     this.parser.mainScope.add (aux);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockquote",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // acceskeyOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceskeyOp",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // acceskeyOp ::= ACCESSKEY EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceskeyOp",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // srcOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("srcOp",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // srcOp ::= SOURCE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("srcOp",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // checkedOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("checkedOp",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // checkedOp ::= CHECKED EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("checkedOp",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valueOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueOp",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valueOp ::= VALUE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueOp",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // typeOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeOp",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // typeOp ::= TYPE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par1.setValue (s1);
                this.parser.parametros.add(par1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeOp",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // input ::= START_TAG INPUT commonAtributes typeOp nameOp valueOp checkedOp sizeOp srcOp acceskeyOp END_TAG 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // textArea ::= START_TAG TEXTAREA commonAtributes nameOp ROWS EQUALS STRING COLUMNS EQUALS STRING accesskeyOp END_TAG texto START_TAG CLOSE_DECLARATION TEXTAREA END_TAG 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textArea",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // formctrl ::= textArea 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formctrl",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // formctrl ::= input 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formctrl",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // formctrl ::= selectDecl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formctrl",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // blockclassPlus ::= blockclassPlus blockClass 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockclassPlus",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // blockclassPlus ::= blockClass 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockclassPlus",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // enctype ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enctype",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // enctype ::= ENCRIPTION_TYPE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                        par1.setValue (s1);
                        RESULT=par1;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enctype",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // method ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // method ::= INPUT_METHOD EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                  par1.setValue (s1);
                  RESULT=par1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // formAtributes ::= commonAtributes method INPUT_ACTION EQUALS STRING enctype 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     this.parser.parametros= new ArrayList<Node>((ArrayList)at);
                        Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                        par1.setValue (s1);
                        this.parser.parametros.add(par1);
           
                        if ((Node)m != null)
                        this.parser.parametros.add((Node)m);
                        if ((Node)e != null)
                        this.parser.parametros.add((Node)e);

                        RESULT= this.parser.parametros;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formAtributes",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // formClass ::= START_TAG FORM formAtributes END_TAG blockclassPlus START_TAG CLOSE_DECLARATION FORM END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object fa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                    Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                     aux.setParametros ((ArrayList)fa);
                     this.parser.mainScope.add (aux);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formClass",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pres ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pres",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // pres ::= XML_SPACE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                    par1.setValue (s1);
                    this.parser.parametros.add(par1);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pres",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // preDeclaration ::= START_TAG PRESERVE commonAtributes pres END_TAG inline START_TAG CLOSE_DECLARATION PRESERVE END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                           aux.setParametros ((ArrayList)at);
                           this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preDeclaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // headingClass ::= START_TAG HEADING6 commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION HEADING6 END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                           aux.setParametros (this.parser.parametros);
                           this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headingClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // headingClass ::= START_TAG HEADING5 commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION HEADING5 END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                           aux.setParametros (this.parser.parametros);
                           this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headingClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // headingClass ::= START_TAG HEADING4 commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION HEADING4 END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                           aux.setParametros (this.parser.parametros);
                           this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headingClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // headingClass ::= START_TAG HEADING3 commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION HEADING3 END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                           aux.setParametros (this.parser.parametros);
                           this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headingClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // headingClass ::= START_TAG HEADING2 commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION HEADING2 END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                           aux.setParametros (this.parser.parametros);
                           this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headingClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // headingClass ::= START_TAG HEADING1 commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION HEADING1 END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                           aux.setParametros (this.parser.parametros);
                           this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headingClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // blockClass ::= headingClass 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // blockClass ::= preDeclaration 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // blockClass ::= formClass 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // blockClass ::= blockquote 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // blockClass ::= listClass 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // blockClass ::= table 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // blockClass ::= parragraphDeclaration 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // blockClass ::= START_TAG CLOSE_DECLARATION BODY END_TAG endHtml 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // blockClass ::= div 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockClass",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // flowModel ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flowModel",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // flowModel ::= texto 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flowModel",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // flowModel ::= flowModel blockClass 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flowModel",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // flowModel ::= flowModel inline_class 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flowModel",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // div ::= START_TAG BLOCK_LEVEL_SECTION commonAtributes END_TAG flowModel START_TAG CLOSE_DECLARATION BLOCK_LEVEL_SECTION END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                           Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros ((ArrayList)p);
                            this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("div",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // strong ::= START_TAG STRONG commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION STRONG END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                            Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros (this.parser.parametros);
                            this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strong",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // em ::= START_TAG EMPHASIS commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION EMPHASIS END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                            Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros (this.parser.parametros);
                            this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("em",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // codeFont ::= START_TAG CODEF commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION CODEF END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                            Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros (this.parser.parametros);
                            this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeFont",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inline_class ::= codeFont 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inline_class ::= em 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inline_class ::= strong 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inline_class ::= spanDeclaration 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inline_class ::= imageDeclaration 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inline_class ::= linkDeclaration 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inline_class ::= breakDeclaration 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inline_class ::= formctrl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_class",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inline ::= texto 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inline ::= inline_class 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inline ::= inline inline_class 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // commonAtributes ::= id class title 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        this.parser.parametros= new ArrayList<Node>();
        if((Node)i != null)
        this.parser.parametros.add((Node)i);
        if((Node)c != null)
        this.parser.parametros.add((Node)c);    
        if((Node)t != null)
        this.parser.parametros.add((Node)t);
        RESULT=this.parser.parametros;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commonAtributes",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // title ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("title",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // title ::= TITLE EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
            par1.setValue (s1);
            RESULT=par1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("title",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // class ::= CLASS EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
            par1.setValue (s1);
            RESULT=par1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // id ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // id ::= ID EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
            par1.setValue (s1);
            RESULT=par1;
       
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // heightOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heightOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // heightOp ::= HEIGHT EQUALS stringNum 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
               Node par3 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par3.setValue (s1.toString());
                RESULT=par3;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heightOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // widthOp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("widthOp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // widthOp ::= WIDTH EQUALS stringNum 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                Node par3 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                par3.setValue (s1.toString());
                RESULT=par3;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("widthOp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // imageAtributes ::= SOURCE EQUALS stringDir widthOp heightOp ALTERNATIVE_NAME EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        this.parser.parametrosImg= new ArrayList<Node>();
                        Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                        par1.setValue (s1.toString());
                        this.parser.parametrosImg.add(par1);

                        Node par2 =new Node (p2, (p2right + 1),(p2left/(p2right + 1)));
                        par2.setValue (s2);
                        this.parser.parametrosImg.add(par2);      
                        
                        if ((Node)w != null)
                        this.parser.parametrosImg.add((Node)w);
                        if ((Node)h != null)
                        this.parser.parametrosImg.add((Node)h);

                        RESULT= this.parser.parametrosImg;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imageAtributes",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // imageDeclaration ::= START_TAG IMAGE commonAtributes imageAtributes CLOSE_DECLARATION END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));

ArrayList<Node> parametrotemp = new ArrayList<Node> ((ArrayList)at);
parametrotemp.addAll((ArrayList)ia);

                        aux.setParametros (parametrotemp);
                        this.parser.mainScope.add (aux);
                        
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imageDeclaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parragraphDeclaration ::= START_TAG PARRAGRAPH commonAtributes END_TAG inline START_TAG CLOSE_DECLARATION PARRAGRAPH END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                            Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros (this.parser.parametros);
                            this.parser.mainScope.add (aux);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parragraphDeclaration",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // breakDeclaration ::= START_TAG BREAK commonAtributes CLOSE_DECLARATION END_TAG 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                            Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros (this.parser.parametros);
                            this.parser.mainScope.add (aux);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakDeclaration",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // blockMix ::= blockClass 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockMix",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // blockModel ::= blockModel blockMix 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockModel",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // blockModel ::= blockMix 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockModel",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bodyDeclaration ::= ERROR 
            {
              Object RESULT =null;
		System.out.println ("Error lexico" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyDeclaration",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bodyDeclaration ::= START_TAG BODY commonAtributes END_TAG blockModel 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros ((ArrayList)at);
                            this.parser.mainScope.add (aux);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyDeclaration",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // meta_atributes ::= NAME EQUALS STRING CONTENT EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     this.parser.parametros= new ArrayList<Node>();
                        Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                        par1.setValue (s1);
                        this.parser.parametros.add(par1);

                        Node par2 =new Node (p2, (p2right + 1),(p2left/(p2right + 1)));
                        par2.setValue (s2);
                        this.parser.parametros.add(par2);      

                        RESULT= this.parser.parametros;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("meta_atributes",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // meta_atributes ::= HTTP_EQUIVALENT EQUALS STRING CONTENT EQUALS STRING 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    this.parser.parametros= new ArrayList<Node>();
                        Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                        par1.setValue (s1);
                        this.parser.parametros.add(par1);

                        Node par2 =new Node (p2, (p2right + 1),(p2left/(p2right + 1)));
                        par2.setValue (s2);
                        this.parser.parametros.add(par2);      

                        RESULT= this.parser.parametros;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("meta_atributes",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metaDeclaration ::= START_TAG CLOSE_DECLARATION HEAD END_TAG 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metaDeclaration",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metaDeclaration ::= START_TAG META_DATA meta_atributes CLOSE_DECLARATION END_TAG metaDeclaration 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros ((ArrayList)m);
                            this.parser.mainScope.add (aux);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metaDeclaration",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // xhtmlHeadElements ::= ERROR 
            {
              Object RESULT =null;
		System.out.println ("Error lexico" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xhtmlHeadElements",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // xhtmlHeadElements ::= START_TAG TITLE END_TAG texto START_TAG CLOSE_DECLARATION TITLE END_TAG metaDeclaration 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                        Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            this.parser.mainScope.add (aux);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xhtmlHeadElements",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // headDeclaration ::= ERROR 
            {
              Object RESULT =null;
		System.out.println ("Error lexico" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headDeclaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // headDeclaration ::= START_TAG HEAD END_TAG xhtmlHeadElements bodyDeclaration 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros (this.parser.parametros);
                            this.parser.mainScope.add (aux);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("headDeclaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stringNum ::= STRINGNUM 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringNum",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stringNum ::= STRINGURL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "Numero",(sright) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringNum",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stringNum ::= STRINGDIR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "Numero",(sright) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringNum",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stringNum ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "Numero", (sright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringNum",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stringDir ::= STRINGNUM 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "Direccion local",(sright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringDir",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stringDir ::= STRINGURL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "Direccion local",(sright) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringDir",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stringDir ::= STRINGDIR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringDir",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stringDir ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "Direccion local", (sright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringDir",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stringUrl ::= STRINGNUM 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "URL",(sright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringUrl",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stringUrl ::= STRINGURL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringUrl",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stringUrl ::= STRINGDIR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "URL",(sright) );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringUrl",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stringUrl ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkType(s, "URL", (sright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringUrl",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // htmlDeclaration ::= ERROR 
            {
              Object RESULT =null;
		System.out.println ("Error lexico" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("htmlDeclaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // htmlDeclaration ::= START_TAG HTML XMLNS EQUALS stringUrl XML_LANGUAGE EQUALS STRING LANGUAGE EQUALS STRING END_TAG headDeclaration 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    this.parser.parametros= new ArrayList<Node>();
                    Node par1 =new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                    par1.setValue (s1.toString());
                    this.parser.parametros.add(par1);

                    Node par2 =new Node (p2, (p2right + 1),(p2left/(p2right + 1)));
                    par2.setValue (s2);
                    this.parser.parametros.add(par2);

                    Node par3 =new Node (p3, (p3right + 1),(p3left/(p3right + 1)));
                    par3.setValue (s3);
                    this.parser.parametros.add(par3);

                    this.parser.mainScope.add(new Node (m,(mright + 1),(mleft/(mright + 1)), this.parser.parametros ));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("htmlDeclaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // doctypeDeclaration ::= ERROR 
            {
              Object RESULT =null;
		System.out.println ("Error lexico" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doctypeDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // doctypeDeclaration ::= START_TAG DOCTYPE HTML texto END_TAG htmlDeclaration 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                        Node aux = new Node (p1, (p1right + 1),(p1left/(p1right + 1)));
                            aux.setParametros (this.parser.parametros);
                            this.parser.mainScope.add (aux);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doctypeDeclaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= doctypeDeclaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

