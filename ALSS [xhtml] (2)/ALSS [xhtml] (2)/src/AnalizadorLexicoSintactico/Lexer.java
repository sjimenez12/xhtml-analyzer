/* The following code was generated by JFlex 1.4.3 on 6/2/13 10:31 PM */

package AnalizadorLexicoSintactico;
import java_cup.runtime.Symbol;

/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/2/13 10:31 PM from the specification file
 * <tt>src/AnalizadorLexicoSintactico/scanner.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  7,  0,  6,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  4, 12,  2,  0,  2,  0,  0, 17, 18, 13,  0, 16, 10,  2, 21, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3, 15,  9, 14, 11, 39, 
     2,  2,  2, 47, 45, 51,  2,  2,  2,  2,  2,  2,  2,  2,  2, 46, 
    50,  2,  2,  2, 48,  2,  2,  2,  2, 49,  2,  0,  0,  0,  0,  5, 
     0, 31, 26, 22, 27, 30, 29, 41,  8, 34,  2, 44, 24, 37, 35, 23, 
    33, 43, 38, 32, 25, 36, 40, 52, 42, 28,  2, 19,  0, 20,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\3\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\4\3\1\17\3\3\1\20\1\3\1\21\1\22"+
    "\3\3\1\23\4\3\1\24\2\3\1\25\2\0\1\26"+
    "\1\27\2\3\1\30\2\3\1\31\1\32\1\3\1\33"+
    "\4\3\1\34\2\3\1\35\1\36\1\37\1\40\15\3"+
    "\1\41\4\3\1\42\13\3\1\0\1\43\16\3\1\44"+
    "\4\3\1\45\7\3\1\46\2\3\1\47\4\3\1\50"+
    "\3\3\1\51\1\52\1\3\1\53\1\0\3\3\1\54"+
    "\1\55\2\3\1\56\4\3\1\57\1\60\1\61\10\3"+
    "\1\62\3\3\1\63\1\3\1\64\6\3\1\0\1\3"+
    "\1\65\1\0\3\3\1\66\1\67\1\70\1\71\1\3"+
    "\1\72\4\3\1\73\1\3\1\74\3\3\1\75\2\3"+
    "\1\76\2\3\1\77\1\100\1\3\1\0\1\101\3\0"+
    "\2\3\1\102\1\103\2\3\1\104\1\3\1\105\1\106"+
    "\1\3\1\107\1\110\5\3\2\0\1\65\1\111\1\112"+
    "\2\3\1\113\1\3\1\114\1\115\3\3\1\116\1\0"+
    "\1\3\1\117\1\120\1\121\2\3\1\0\1\3\1\122"+
    "\1\123\1\124\1\3\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\u0109\0\u013e"+
    "\0\65\0\u0173\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\237\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\65\0\u048e\0\u04c3\0\u04f8\0\u052d\0\237\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0173\0\65\0\65\0\u0636\0\u066b"+
    "\0\237\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\237\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\237\0\u087d\0\u08b2\0\237\0\237"+
    "\0\237\0\237\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\237"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\237\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\237\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\237\0\u11ce\0\u1203\0\u1238\0\u126d\0\237\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\237\0\u1415\0\u144a"+
    "\0\237\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15f2\0\237\0\237\0\u1627\0\237\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\237\0\237\0\u1730\0\u1765\0\237\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\237\0\237\0\237\0\u186e\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\237\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\237\0\u1ab5\0\237\0\u1aea\0\u1b1f\0\u1b54\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\237\0\237\0\237\0\237\0\u1d9b\0\237\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\u1e6f\0\237\0\u1ea4\0\237\0\u1ed9\0\u1f0e"+
    "\0\u1f43\0\237\0\u1f78\0\u1fad\0\237\0\u1fe2\0\u2017\0\u204c"+
    "\0\237\0\u2081\0\u20b6\0\237\0\u1c92\0\u20eb\0\u2120\0\u2155"+
    "\0\u218a\0\237\0\237\0\u21bf\0\u21f4\0\237\0\u2229\0\237"+
    "\0\u225e\0\u2293\0\237\0\237\0\u22c8\0\u22fd\0\u2332\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u2406\0\237\0\237\0\u243b\0\u2470"+
    "\0\237\0\u24a5\0\237\0\237\0\u24da\0\u250f\0\u2544\0\237"+
    "\0\u2579\0\u25ae\0\237\0\237\0\237\0\u25e3\0\u2618\0\u264d"+
    "\0\u2682\0\237\0\237\0\65\0\u26b7\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\2\2\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\4\1\42\1\43\1\4"+
    "\1\44\11\4\1\45\66\0\1\3\64\0\5\4\2\0"+
    "\1\4\15\0\21\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\21\4\1\0\5\4\1\46\7\4\1\0"+
    "\1\47\4\4\2\0\1\4\15\0\3\4\1\50\4\4"+
    "\1\51\7\4\1\52\1\0\15\4\4\0\1\53\60\0"+
    "\7\54\1\55\4\54\1\56\1\0\47\54\1\0\5\4"+
    "\2\0\1\4\15\0\1\4\1\57\7\4\1\60\7\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\2\4"+
    "\1\61\10\4\1\62\5\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\11\4\1\63\2\4\1\64\4\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\65\15\0\4\4"+
    "\1\66\1\67\1\70\1\71\1\4\1\72\2\4\1\73"+
    "\3\4\1\74\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\1\4\1\75\7\4\1\76\6\4\1\77\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\2\4\1\100"+
    "\1\101\1\4\1\102\6\4\1\103\4\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\1\4\1\104\16\4"+
    "\1\105\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\15\4\1\106\3\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\1\107\1\4\1\110\2\4\1\111\13\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\1\112"+
    "\2\4\1\113\4\4\1\114\2\4\1\115\2\4\1\116"+
    "\1\4\1\117\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\5\4\1\120\1\4\1\121\5\4\1\122\1\4"+
    "\1\123\1\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\11\4\1\124\7\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\2\4\1\125\16\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\10\4\1\126\10\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\10\4"+
    "\1\127\1\130\7\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\17\4\1\131\1\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\14\4\1\132\4\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\21\4\1\0"+
    "\6\4\1\133\6\4\1\0\5\4\2\0\1\4\15\0"+
    "\3\4\1\134\13\4\1\135\1\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\11\4\1\136\2\4\1\137"+
    "\4\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\140\10\4\1\0\15\4\12\0\1\141\53\0"+
    "\5\4\2\0\1\4\15\0\2\4\1\142\12\4\1\143"+
    "\3\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\13\4\1\144\5\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\3\4\1\145\15\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\15\4\1\146\3\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\15\4\1\147"+
    "\3\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\150\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\1\4\1\151\17\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\13\4\1\152\5\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\1\4\1\153"+
    "\17\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\4\4\1\154\13\4\1\155\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\3\4\1\156\15\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\5\4\1\157\13\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\12\4"+
    "\1\160\6\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\21\4\1\0\1\161\14\4\1\0\5\4\2\0"+
    "\1\4\15\0\20\4\1\162\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\11\4\1\163\7\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\1\164\20\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\3\4\1\165"+
    "\15\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\3\4\1\166\15\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\5\4\1\167\13\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\1\4\1\170\16\4\1\171"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\6\4"+
    "\1\172\12\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\2\4\1\173\16\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\11\4\1\174\7\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\17\4\1\175\1\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\1\176"+
    "\20\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\20\4\1\177\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\13\4\1\200\5\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\21\4\1\0\1\4\1\201\13\4"+
    "\1\0\5\4\2\0\1\4\15\0\17\4\1\202\1\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\3\4"+
    "\1\203\15\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\20\4\1\204\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\2\4\1\205\16\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\2\4\1\206\16\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\5\4\1\207"+
    "\13\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\21\4\1\0\7\4\1\210\5\4\1\0\5\4\2\0"+
    "\1\4\15\0\13\4\1\211\5\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\2\4\1\212\16\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\5\4\1\213"+
    "\13\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\21\4\1\0\1\4\1\214\13\4\1\0\5\4\2\0"+
    "\1\4\15\0\7\4\1\215\11\4\1\0\15\4\12\0"+
    "\1\216\53\0\5\4\2\0\1\4\15\0\3\4\1\217"+
    "\15\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\3\4\1\220\15\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\14\4\1\221\4\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\21\4\1\0\1\4\1\222"+
    "\13\4\1\0\5\4\2\0\1\4\15\0\21\4\1\0"+
    "\4\4\1\223\10\4\1\0\5\4\2\0\1\4\15\0"+
    "\11\4\1\224\7\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\5\4\1\225\13\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\10\4\1\226\10\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\1\4\1\227"+
    "\17\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\2\4\1\230\16\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\21\4\1\0\1\4\1\231\13\4\1\0"+
    "\5\4\2\0\1\4\15\0\2\4\1\232\16\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\6\4\1\233"+
    "\12\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\234\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\17\4\1\235\1\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\17\4\1\236\1\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\1\4\1\237"+
    "\17\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\14\4\1\240\4\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\20\4\1\241\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\13\4\1\242\5\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\14\4\1\243\4\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\2\4"+
    "\1\244\16\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\10\4\1\245\10\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\15\4\1\246\3\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\17\4\1\247\1\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\11\4"+
    "\1\250\7\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\16\4\1\251\2\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\10\4\1\252\10\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\253\15\0\11\4\1\254\7\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\12\4"+
    "\1\255\6\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\16\4\1\256\2\4\1\0\15\4\1\0\2\4"+
    "\1\257\2\4\2\0\1\4\15\0\15\4\1\260\3\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\3\4"+
    "\1\261\15\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\21\4\1\0\10\4\1\262\4\4\1\0\5\4"+
    "\2\0\1\4\1\0\1\263\13\0\21\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\3\4\1\264\15\4"+
    "\1\0\15\4\12\265\1\266\52\265\1\0\5\4\2\0"+
    "\1\4\15\0\10\4\1\267\10\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\14\4\1\270\4\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\1\4\1\271"+
    "\17\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\5\4\1\272\13\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\6\4\1\273\12\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\3\4\1\274\15\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\10\4\1\275"+
    "\10\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\276\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\10\4\1\277\10\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\10\4\1\300\10\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\5\4\1\301"+
    "\13\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\1\4\1\302\17\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\10\4\1\303\10\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\10\4\1\304\10\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\13\4\1\305"+
    "\5\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\306\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\1\307\20\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\11\4\1\310\7\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\17\4\1\311\1\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\3\4"+
    "\1\312\15\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\1\4\1\313\17\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\14\4\1\314\4\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\10\4\1\315\10\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\2\4"+
    "\1\316\7\4\1\317\6\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\12\4\1\320\6\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\321\15\0\21\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\21\4\1\0\11\4"+
    "\1\322\3\4\36\0\1\323\27\0\5\4\2\0\1\324"+
    "\15\0\21\4\1\0\15\4\12\325\1\326\64\325\1\327"+
    "\52\325\1\0\5\4\2\0\1\4\15\0\15\4\1\330"+
    "\3\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\1\4\1\331\17\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\15\4\1\332\3\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\3\4\1\333\15\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\4\4\1\334"+
    "\14\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\14\4\1\335\4\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\15\4\1\336\3\4\1\0\15\4\1\0"+
    "\5\4\2\0\1\4\15\0\12\4\1\337\6\4\1\0"+
    "\15\4\1\0\5\4\2\0\1\4\15\0\3\4\1\340"+
    "\15\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\3\4\1\341\15\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\20\4\1\342\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\10\4\1\343\10\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\5\4\1\344\13\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\1\4"+
    "\1\345\17\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\11\4\1\346\7\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\13\4\1\347\5\4\1\0\15\4"+
    "\1\0\2\4\1\350\2\4\2\0\1\4\15\0\21\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\21\4"+
    "\1\0\12\4\1\351\2\4\53\0\1\352\11\0\12\325"+
    "\1\353\52\325\12\265\1\354\1\6\51\265\1\0\5\4"+
    "\2\0\1\4\15\0\3\4\1\355\15\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\15\4\1\356\3\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\1\4"+
    "\1\357\17\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\15\4\1\360\3\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\12\4\1\361\6\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\10\4\1\362\10\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\6\4"+
    "\1\363\12\4\1\0\15\4\1\0\5\4\2\0\1\4"+
    "\15\0\15\4\1\364\3\4\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\15\4\1\365\3\4\1\0\15\4"+
    "\1\0\5\4\2\0\1\4\15\0\11\4\1\366\7\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\21\4"+
    "\1\0\2\4\1\367\12\4\1\0\5\4\2\0\1\4"+
    "\15\0\21\4\1\0\13\4\1\370\1\4\44\0\1\371"+
    "\20\0\12\325\1\353\1\6\51\325\1\0\5\4\2\0"+
    "\1\4\15\0\20\4\1\372\1\0\15\4\1\0\5\4"+
    "\2\0\1\4\15\0\21\4\1\0\1\4\1\373\13\4"+
    "\1\0\5\4\2\0\1\4\15\0\5\4\1\374\13\4"+
    "\1\0\15\4\1\0\5\4\2\0\1\4\15\0\21\4"+
    "\1\0\1\4\1\375\13\4\1\0\5\4\2\0\1\4"+
    "\15\0\1\376\20\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\12\4\1\377\6\4\1\0\15\4\42\0"+
    "\1\u0100\23\0\5\4\2\0\1\4\15\0\5\4\1\u0101"+
    "\13\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\10\4\1\u0102\10\4\1\0\15\4\1\0\5\4\2\0"+
    "\1\4\15\0\14\4\1\u0103\4\4\1\0\15\4\50\0"+
    "\1\u0104\15\0\5\4\2\0\1\4\15\0\10\4\1\u0105"+
    "\10\4\1\0\15\4\1\0\5\4\2\0\1\4\15\0"+
    "\20\4\1\u0106\1\0\15\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\1\1\10\11"+
    "\17\1\1\11\10\1\2\0\2\11\62\1\1\0\54\1"+
    "\1\0\44\1\1\0\2\1\1\0\34\1\1\0\1\1"+
    "\3\0\22\1\2\0\15\1\1\0\6\1\1\0\3\1"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 78: 
          { return new Symbol(sym.DOCTYPE, yychar, yyline, yytext());
          }
        case 86: break;
        case 77: 
          { return new Symbol(sym.VERSION, yychar, yyline, yytext());
          }
        case 87: break;
        case 56: 
          { return new Symbol(sym.TABLE_FOOT, yychar, yyline, yytext());
          }
        case 88: break;
        case 27: 
          { return new Symbol(sym.TABLE_ITEM, yychar, yyline, yytext());
          }
        case 89: break;
        case 3: 
          { return new Symbol(sym.TEXT, yychar, yyline, yytext());
          }
        case 90: break;
        case 8: 
          { return new Symbol(sym.SEMICOLON, yychar, yyline, yytext());
          }
        case 91: break;
        case 53: 
          { return new Symbol(sym.ERROR_UNTERM_COMMENT, yychar, yyline, yytext());
          }
        case 92: break;
        case 26: 
          { return new Symbol(sym.TABLE_HEADER, yychar, yyline, yytext());
          }
        case 93: break;
        case 12: 
          { return new Symbol(sym.LCBRACE, yychar, yyline, yytext());
          }
        case 94: break;
        case 18: 
          { return new Symbol(sym.ITALIC_FORMATTING, yychar, yyline, yytext());
          }
        case 95: break;
        case 14: 
          { return new Symbol(sym.CLOSE_DECLARATION, yychar, yyline, yytext());
          }
        case 96: break;
        case 37: 
          { return new Symbol(sym.ALTERNATIVE_NAME, yychar, yyline, yytext());
          }
        case 97: break;
        case 83: 
          { return new Symbol(sym.XMLNS_XSI, yychar, yyline, yytext());
          }
        case 98: break;
        case 79: 
          { return new Symbol(sym.ENCODING, yychar, yyline, yytext());
          }
        case 99: break;
        case 54: 
          { return new Symbol(sym.TABLE_HEAD, yychar, yyline, yytext());
          }
        case 100: break;
        case 85: 
          { return new Symbol(sym.IFRAME_FRAMEBORDER, yychar, yyline, yytext());
          }
        case 101: break;
        case 38: 
          { return new Symbol(sym.SOURCE, yychar, yyline, yytext());
          }
        case 102: break;
        case 43: 
          { return new Symbol(sym.REFERENCE, yychar, yyline, yytext());
          }
        case 103: break;
        case 6: 
          { return new Symbol(sym.END_TAG, yychar, yyline, yytext());
          }
        case 104: break;
        case 81: 
          { return new Symbol(sym.XML_LANGUAGE, yychar, yyline, yytext());
          }
        case 105: break;
        case 9: 
          { return new Symbol(sym.COMA, yychar, yyline, yytext());
          }
        case 106: break;
        case 13: 
          { return new Symbol(sym.RCBRACE, yychar, yyline, yytext());
          }
        case 107: break;
        case 60: 
          { return new Symbol(sym.STYLE, yychar, yyline, yytext());
          }
        case 108: break;
        case 5: 
          { return new Symbol(sym.START_TAG, yychar, yyline, yytext());
          }
        case 109: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 110: break;
        case 25: 
          { return new Symbol(sym.LIST_ITEM, yychar, yyline, yytext());
          }
        case 111: break;
        case 63: 
          { return new Symbol(sym.XMLNS, yychar, yyline, yytext());
          }
        case 112: break;
        case 62: 
          { return new Symbol(sym.VALUE, yychar, yyline, yytext());
          }
        case 113: break;
        case 47: 
          { return new Symbol(sym.BODY, yychar, yyline, yytext());
          }
        case 114: break;
        case 19: 
          { return new Symbol(sym.META_DECLARATION, yychar, yyline, yytext());
          }
        case 115: break;
        case 35: 
          { return new Symbol(sym.COLUMN, yychar, yyline, yytext());
          }
        case 116: break;
        case 7: 
          { return new Symbol(sym.EQUALS, yychar, yyline, yytext());
          }
        case 117: break;
        case 24: 
          { return new Symbol(sym.ORDERED_LIST, yychar, yyline, yytext());
          }
        case 118: break;
        case 69: 
          { return new Symbol(sym.SCRIPT, yychar, yyline, yytext());
          }
        case 119: break;
        case 52: 
          { return new Symbol(sym.META_DATA, yychar, yyline, yytext());
          }
        case 120: break;
        case 16: 
          { return new Symbol(sym.LINK, yychar, yyline, yytext());
          }
        case 121: break;
        case 15: 
          { return new Symbol(sym.BOLD_FORMATTING, yychar, yyline, yytext());
          }
        case 122: break;
        case 74: 
          { return new Symbol(sym.CAPTION, yychar, yyline, yytext());
          }
        case 123: break;
        case 55: 
          { return new Symbol(sym.TABLE_BODY, yychar, yyline, yytext());
          }
        case 124: break;
        case 41: 
          { return new Symbol(sym.HTML, yychar, yyline, yytext());
          }
        case 125: break;
        case 58: 
          { return new Symbol(sym.TITLE, yychar, yyline, yytext());
          }
        case 126: break;
        case 80: 
          { return new Symbol(sym.SELECTED, yychar, yyline, yytext());
          }
        case 127: break;
        case 59: 
          { return new Symbol(sym.SCOPE, yychar, yyline, yytext());
          }
        case 128: break;
        case 21: 
          { return new Symbol(sym.HORIZONTAL_RULE, yychar, yyline, yytext());
          }
        case 129: break;
        case 39: 
          { return new Symbol(sym.IMAGE, yychar, yyline, yytext());
          }
        case 130: break;
        case 11: 
          { return new Symbol(sym.RPAR, yychar, yyline, yytext());
          }
        case 131: break;
        case 28: 
          { return new Symbol(sym.TABLE_ROW, yychar, yyline, yytext());
          }
        case 132: break;
        case 33: 
          { return new Symbol(sym.ID, yychar, yyline, yytext());
          }
        case 133: break;
        case 10: 
          { return new Symbol(sym.LPAR, yychar, yyline, yytext());
          }
        case 134: break;
        case 44: 
          { return new Symbol(sym.LANGUAGE, yychar, yyline, yytext());
          }
        case 135: break;
        case 64: 
          { return new Symbol(sym.WIDTH, yychar, yyline, yytext());
          }
        case 136: break;
        case 76: 
          { return new Symbol(sym.SUMMARY, yychar, yyline, yytext());
          }
        case 137: break;
        case 20: 
          { 
          }
        case 138: break;
        case 29: 
          { return new Symbol(sym.BREAK, yychar, yyline, yytext());
          }
        case 139: break;
        case 73: 
          { return new Symbol(sym.CONTENT, yychar, yyline, yytext());
          }
        case 140: break;
        case 40: 
          { return new Symbol(sym.XML, yychar, yyline, yytext());
          }
        case 141: break;
        case 65: 
          { return new Symbol(sym.HEIGHT, yychar, yyline, yytext());
          }
        case 142: break;
        case 22: 
          { return new Symbol(sym.ERROR_UNTERM_STRING, yychar, yyline, yytext());
          }
        case 143: break;
        case 49: 
          { return new Symbol(sym.FORM, yychar, yyline, yytext());
          }
        case 144: break;
        case 34: 
          { return new Symbol(sym.UNORDERED_LIST, yychar, yyline, yytext());
          }
        case 145: break;
        case 61: 
          { return new Symbol(sym.INPUT, yychar, yyline, yytext());
          }
        case 146: break;
        case 17: 
          { return new Symbol(sym.PARRAGRAPH, yychar, yyline, yytext());
          }
        case 147: break;
        case 31: 
          { return new Symbol(sym.DEFINITION_LIST_ITEM, yychar, yyline, yytext());
          }
        case 148: break;
        case 67: 
          { return new Symbol(sym.IFRAME_TARGET_LINK, yychar, yyline, yytext());
          }
        case 149: break;
        case 36: 
          { return new Symbol(sym.BLOCK_LEVEL_SECTION, yychar, yyline, yytext());
          }
        case 150: break;
        case 23: 
          { return new Symbol(sym.STRING, yychar, yyline, yytext());
          }
        case 151: break;
        case 51: 
          { return new Symbol(sym.NAME, yychar, yyline, yytext());
          }
        case 152: break;
        case 46: 
          { return new Symbol(sym.TYPE, yychar, yyline, yytext());
          }
        case 153: break;
        case 68: 
          { return new Symbol(sym.INPUT_ACTION, yychar, yyline, yytext());
          }
        case 154: break;
        case 4: 
          { /* ignore */
          }
        case 155: break;
        case 71: 
          { return new Symbol(sym.IFRAME, yychar, yyline, yytext());
          }
        case 156: break;
        case 72: 
          { return new Symbol(sym.INPUT_METHOD, yychar, yyline, yytext());
          }
        case 157: break;
        case 57: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 158: break;
        case 30: 
          { return new Symbol(sym.DEFINITION_LIST, yychar, yyline, yytext());
          }
        case 159: break;
        case 84: 
          { return new Symbol(sym.HTTP_EQUIVALENT, yychar, yyline, yytext());
          }
        case 160: break;
        case 48: 
          { return new Symbol(sym.DEFAULT_ADDRESS, yychar, yyline, yytext());
          }
        case 161: break;
        case 82: 
          { return new Symbol(sym.XML_SPACE, yychar, yyline, yytext());
          }
        case 162: break;
        case 50: 
          { return new Symbol(sym.BLOCK_LEVEL_INLINE, yychar, yyline, yytext());
          }
        case 163: break;
        case 66: 
          { return new Symbol(sym.OPTION, yychar, yyline, yytext());
          }
        case 164: break;
        case 70: 
          { return new Symbol(sym.SELECT, yychar, yyline, yytext());
          }
        case 165: break;
        case 42: 
          { return new Symbol(sym.HEAD, yychar, yyline, yytext());
          }
        case 166: break;
        case 32: 
          { return new Symbol(sym.DEFINITION_LIST_DESCRIPTION, yychar, yyline, yytext());
          }
        case 167: break;
        case 2: 
          { return new Symbol(sym.NUMBER, yychar, yyline, yytext());
          }
        case 168: break;
        case 75: 
          { return new Symbol(sym.ADDRESS, yychar, yyline, yytext());
          }
        case 169: break;
        case 45: 
          { return new Symbol(sym.DOCUMENT_EXTERNALSOURCE_LINK, yychar, yyline, yytext());
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
