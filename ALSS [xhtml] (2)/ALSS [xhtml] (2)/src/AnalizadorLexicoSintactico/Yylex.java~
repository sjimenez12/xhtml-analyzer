/* The following code was generated by JFlex 1.4.3 on 6/16/13 5:22 AM */

package AnalizadorLexicoSintactico;
import java_cup.runtime.Symbol;


/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/16/13 5:22 AM from the specification file
 * <tt>src/AnalizadorLexicoSintactico/scanner.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  7,  0,  6,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  4, 11,  2,  0,  2,  0,  0, 20, 21, 16,  0, 19,  9,  2, 15, 
     1, 44, 45, 46, 47, 48, 49,  1,  1,  1,  3, 18,  8, 17, 10, 41, 
     2,  2,  2, 54, 52, 58,  2,  2,  2,  2,  2,  2,  2,  2,  2, 53, 
    57,  2,  2,  2, 55,  2, 60,  2,  2, 56,  2,  0,  0,  0,  0,  5, 
     0, 26, 34, 28, 35, 24, 37, 43, 12, 32,  2, 51, 30, 40, 38, 29, 
    14, 50, 27, 31, 13, 39, 42, 59, 25, 36, 33, 22,  0, 23,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\2\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\3\1\20\5\3\1\21\1\22\5\3"+
    "\1\23\4\3\3\0\1\24\1\25\2\0\2\3\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\2\3"+
    "\1\36\2\3\1\37\4\3\1\40\15\3\1\41\1\3"+
    "\1\42\7\3\1\43\4\3\1\44\2\3\1\45\1\46"+
    "\1\3\1\47\3\3\1\50\6\3\1\0\1\51\1\0"+
    "\1\52\15\3\1\53\1\3\1\54\3\3\1\55\6\3"+
    "\1\56\13\3\1\57\6\3\1\60\3\3\1\61\11\3"+
    "\2\0\1\3\1\62\1\63\1\3\1\64\6\3\1\65"+
    "\5\3\1\66\3\3\1\67\1\3\1\70\2\3\1\71"+
    "\1\72\2\3\1\73\1\3\1\74\1\75\2\3\1\76"+
    "\3\3\1\77\3\3\1\100\1\101\2\3\1\102\1\103"+
    "\1\3\1\104\5\3\1\105\3\0\2\3\1\106\2\3"+
    "\1\107\1\110\1\111\1\112\4\3\1\113\2\3\1\114"+
    "\6\3\1\115\2\3\1\116\2\3\1\117\2\3\1\120"+
    "\4\3\1\121\1\122\2\3\5\0\1\3\1\123\1\3"+
    "\1\124\5\3\1\125\7\3\1\126\1\127\1\130\1\131"+
    "\1\3\1\132\2\3\1\133\1\3\1\134\1\3\1\0"+
    "\1\105\2\0\1\135\1\3\1\136\5\3\1\137\1\140"+
    "\1\141\1\142\1\143\1\144\1\3\1\145\2\3\1\146"+
    "\1\147\2\0\1\150\1\151\1\152\3\3\1\153\2\3"+
    "\1\154\1\0\1\155\1\156\1\157\2\3\1\160\1\161"+
    "\1\3\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\75\0\u0131\0\75"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\75\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\75\0\75\0\u07a0\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\u08d1\0\u090e\0\u094b\0\267\0\u0988\0\u09c5\0\267\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\267\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\267\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\u0f7d\0\u0fba\0\u0ff7\0\267\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\267\0\u1128\0\u1165\0\267\0\267\0\u11a2\0\267\0\u11df"+
    "\0\u121c\0\u1259\0\267\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\75\0\u1441\0\75\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\267\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b"+
    "\0\267\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\267\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\267\0\u1e80\0\u1ebd\0\u1efa\0\267\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\267\0\u2213\0\u2250\0\267\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\267\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\267\0\u252c\0\u2569\0\u25a6\0\267"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\267\0\u2714\0\u2751"+
    "\0\267\0\u278e\0\267\0\267\0\u27cb\0\u2808\0\267\0\u2845"+
    "\0\u2882\0\u28bf\0\267\0\u28fc\0\u2939\0\u2976\0\267\0\267"+
    "\0\u29b3\0\u29f0\0\267\0\267\0\u2a2d\0\267\0\u2a6a\0\u2aa7"+
    "\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f"+
    "\0\u2ccc\0\267\0\u2d09\0\u2d46\0\267\0\267\0\267\0\267"+
    "\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\267"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\267\0\u309c"+
    "\0\u30d9\0\267\0\u3116\0\u3153\0\267\0\u3190\0\u31cd\0\267"+
    "\0\u320a\0\u3247\0\u3284\0\u32c1\0\267\0\267\0\u32fe\0\u333b"+
    "\0\u2b9b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\267\0\u34a9"+
    "\0\267\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\267\0\u3617"+
    "\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\267\0\267"+
    "\0\u37c2\0\267\0\u37ff\0\267\0\u383c\0\u3879\0\267\0\u38b6"+
    "\0\267\0\u38f3\0\u3930\0\u3930\0\u396d\0\u39aa\0\267\0\u39e7"+
    "\0\267\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\u3b55\0\267\0\u3b92\0\u3bcf"+
    "\0\267\0\267\0\u3c0c\0\u3c49\0\267\0\267\0\267\0\u3c86"+
    "\0\u3cc3\0\u3d00\0\267\0\u3d3d\0\u3d7a\0\75\0\u3db7\0\267"+
    "\0\267\0\267\0\u3df4\0\u3e31\0\75\0\267\0\u3e6e\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\2\2\6\1\7\1\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\2\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\4"+
    "\1\36\1\37\1\4\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\4\6\3\11\4\1\46\1\47\76\0\1\3"+
    "\52\0\6\3\14\0\5\4\6\0\3\4\11\0\21\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\21\4"+
    "\1\0\12\4\1\50\10\4\4\0\1\51\70\0\1\52"+
    "\1\53\5\52\1\54\3\52\1\55\1\56\2\52\1\57"+
    "\1\0\33\52\6\53\13\52\1\0\5\4\6\0\1\4"+
    "\1\60\1\4\11\0\1\61\2\4\1\62\15\4\1\0"+
    "\2\4\1\63\1\64\1\65\1\66\1\67\1\70\13\4"+
    "\1\0\5\4\6\0\1\71\2\4\11\0\1\72\1\4"+
    "\1\73\1\74\4\4\1\75\1\4\1\76\1\77\1\100"+
    "\1\101\3\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\3\4\1\102\15\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\16\4\1\103\1\4\1\104\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\20\4\1\105"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\4"+
    "\1\106\2\4\1\107\1\4\1\110\3\4\1\111\1\112"+
    "\5\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\5\4\1\113\13\4\1\0\23\4\1\0\5\4\6\0"+
    "\1\114\2\4\11\0\2\4\1\115\2\4\1\116\1\117"+
    "\1\4\1\120\10\4\1\0\23\4\1\0\5\4\6\0"+
    "\2\4\1\121\11\0\6\4\1\122\12\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\2\4\1\123\5\4"+
    "\1\124\10\4\1\0\23\4\1\0\5\4\6\0\1\4"+
    "\1\125\1\126\11\0\1\127\2\4\1\130\1\131\3\4"+
    "\1\132\6\4\1\133\1\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\13\4\1\134\1\4\1\135\1\136"+
    "\1\4\1\137\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\2\4\1\140\1\141\1\4\1\142\1\143\12\4"+
    "\1\0\23\4\1\0\5\4\6\0\1\4\1\144\1\4"+
    "\11\0\6\4\1\145\1\4\1\146\2\4\1\147\5\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\3\4"+
    "\1\150\1\4\1\151\13\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\2\4\1\152\16\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\6\4\1\153\12\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\154"+
    "\20\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\1\155\1\4\1\156\16\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\10\4\1\157\10\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\2\4\1\160\16\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\21\4"+
    "\1\0\13\4\1\161\7\4\11\0\1\162\63\0\7\52"+
    "\1\54\3\52\1\55\4\52\1\0\55\52\1\53\5\52"+
    "\1\54\3\52\1\163\4\52\1\0\33\52\6\53\22\52"+
    "\1\54\3\52\1\55\1\52\1\164\2\52\1\0\54\52"+
    "\7\57\1\54\3\57\1\165\4\57\1\0\54\57\1\0"+
    "\5\4\6\0\1\4\1\166\1\4\11\0\20\4\1\167"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\2\4"+
    "\1\170\5\4\1\171\10\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\1\172\20\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\1\173\20\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\1\4\1\174\17\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\3\4"+
    "\1\175\6\4\1\176\6\4\1\0\23\4\1\0\5\4"+
    "\6\0\1\4\1\177\1\4\11\0\21\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\5\4\1\200\13\4"+
    "\1\0\23\4\1\0\5\4\6\0\2\4\1\201\11\0"+
    "\21\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\5\4\1\202\13\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\1\203\20\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\4\4\1\204\14\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\6\4\1\205\12\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\10\4"+
    "\1\206\10\4\1\0\23\4\1\0\5\4\6\0\1\4"+
    "\1\207\1\4\11\0\4\4\1\210\14\4\1\0\23\4"+
    "\1\0\5\4\6\0\1\4\1\211\1\4\11\0\10\4"+
    "\1\212\10\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\12\4\1\213\6\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\13\4\1\214\5\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\21\4\1\0\21\4"+
    "\1\215\1\4\1\0\5\4\6\0\3\4\11\0\1\216"+
    "\20\4\1\0\23\4\1\0\5\4\6\0\2\4\1\217"+
    "\11\0\21\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\6\4\1\220\4\4\1\221\2\4\1\222\2\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\2\4"+
    "\1\223\16\4\1\0\23\4\1\0\5\4\6\0\1\4"+
    "\1\224\1\4\11\0\21\4\1\0\23\4\1\0\5\4"+
    "\6\0\1\4\1\225\1\4\11\0\21\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\16\4\1\226\2\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\16\4"+
    "\1\227\2\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\3\4\1\230\10\4\1\231\4\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\2\4\1\232\16\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\6\4"+
    "\1\233\12\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\4\4\1\234\14\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\3\4\1\235\1\4\1\236\13\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\11\4"+
    "\1\237\7\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\20\4\1\240\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\3\4\1\241\15\4\1\0\23\4\1\0"+
    "\5\4\6\0\2\4\1\242\11\0\21\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\21\4\1\0\1\4"+
    "\1\243\21\4\1\0\5\4\6\0\3\4\11\0\7\4"+
    "\1\244\11\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\13\4\1\245\5\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\5\4\1\246\13\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\21\4\1\0\1\247"+
    "\22\4\1\0\5\4\6\0\3\4\11\0\2\4\1\250"+
    "\16\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\3\4\1\251\15\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\20\4\1\252\1\0\23\4\1\0\5\4"+
    "\6\0\1\4\1\253\1\4\11\0\21\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\3\4\1\254\15\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\6\4"+
    "\1\255\12\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\13\4\1\256\5\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\6\4\1\257\12\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\21\4\1\0\14\4"+
    "\1\260\6\4\11\0\1\261\63\0\7\52\1\54\3\52"+
    "\1\55\1\52\1\262\2\52\1\0\54\52\1\0\5\4"+
    "\6\0\2\4\1\263\11\0\21\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\6\4\1\264\12\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\13\4\1\265"+
    "\5\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\21\4\1\0\1\4\1\266\21\4\1\0\5\4\6\0"+
    "\3\4\11\0\15\4\1\267\3\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\2\4\1\270\16\4\1\0"+
    "\23\4\1\0\5\4\6\0\1\4\1\271\1\4\11\0"+
    "\21\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\21\4\1\0\1\4\1\272\21\4\1\0\5\4\6\0"+
    "\3\4\11\0\6\4\1\273\12\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\6\4\1\274\12\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\13\4\1\275"+
    "\5\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\1\276\20\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\5\4\1\277\13\4\1\0\23\4\1\0\5\4"+
    "\6\0\1\4\1\300\1\4\11\0\5\4\1\301\13\4"+
    "\1\0\23\4\1\0\2\4\1\302\2\4\6\0\3\4"+
    "\11\0\16\4\1\303\2\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\7\4\1\304\11\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\10\4\1\305\10\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\306"+
    "\20\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\21\4\1\0\1\4\1\307\21\4\1\0\5\4\6\0"+
    "\3\4\11\0\3\4\1\310\15\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\3\4\1\311\15\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\7\4\1\312"+
    "\11\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\4\4\1\313\14\4\1\0\23\4\1\0\5\4\6\0"+
    "\1\4\1\314\1\4\11\0\21\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\7\4\1\315\11\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\1\316\20\4"+
    "\1\0\23\4\1\0\5\4\6\0\1\4\1\317\1\4"+
    "\11\0\21\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\7\4\1\320\11\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\1\321\20\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\10\4\1\322\10\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\21\4\1\0"+
    "\1\4\1\323\21\4\1\0\5\4\6\0\3\4\11\0"+
    "\21\4\1\0\11\4\1\324\11\4\1\0\5\4\6\0"+
    "\3\4\11\0\5\4\1\325\13\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\6\4\1\326\12\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\16\4\1\327"+
    "\2\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\1\330\20\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\10\4\1\331\10\4\1\0\23\4\1\0\5\4"+
    "\6\0\2\4\1\332\11\0\21\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\1\333\20\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\20\4\1\334\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\2\4\1\335"+
    "\16\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\17\4\1\336\1\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\1\337\20\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\14\4\1\340\4\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\4\4\1\341\14\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\20\4"+
    "\1\342\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\20\4\1\343\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\1\344\20\4\1\0\23\4\1\0\5\4\6\0"+
    "\1\345\2\4\11\0\2\4\1\346\16\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\7\4\1\347\11\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\17\4"+
    "\1\350\1\4\1\0\23\4\1\0\5\4\6\0\1\4"+
    "\1\351\1\4\11\0\21\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\10\4\1\352\10\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\21\4\1\0\15\4"+
    "\1\353\5\4\11\354\1\355\63\354\7\52\1\54\3\52"+
    "\1\55\2\52\1\356\1\52\1\0\54\52\1\0\5\4"+
    "\3\0\1\357\2\0\3\4\11\0\21\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\1\360\20\4\1\0"+
    "\23\4\1\0\5\4\6\0\1\361\2\4\11\0\21\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\13\4"+
    "\1\362\5\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\2\4\1\363\16\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\1\364\20\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\1\365\20\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\1\366\20\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\14\4\1\367"+
    "\4\4\1\0\23\4\1\0\5\4\6\0\1\4\1\370"+
    "\1\4\11\0\21\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\14\4\1\371\4\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\13\4\1\372\5\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\6\4\1\373"+
    "\1\374\11\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\7\4\1\375\11\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\5\4\1\376\13\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\7\4\1\377\11\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\16\4"+
    "\1\u0100\2\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\1\u0101\20\4\1\0\23\4\1\0\5\4\6\0"+
    "\2\4\1\u0102\11\0\21\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\21\4\1\0\11\4\1\u0103\11\4"+
    "\1\0\5\4\6\0\3\4\11\0\10\4\1\u0104\10\4"+
    "\1\0\23\4\1\0\5\4\6\0\2\4\1\u0105\11\0"+
    "\21\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\1\u0106\20\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\7\4\1\u0107\11\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\5\4\1\u0108\13\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\16\4\1\u0109\2\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\u010a"+
    "\20\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\4\4\1\u010b\14\4\1\0\23\4\1\0\5\4\6\0"+
    "\2\4\1\u010c\11\0\21\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\1\u010d\20\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\2\4\1\u010e\16\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\20\4\1\u010f"+
    "\1\0\23\4\1\0\5\4\6\0\1\4\1\u0110\1\4"+
    "\11\0\21\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\21\4\1\0\11\4\1\u0111\11\4\1\0\5\4"+
    "\6\0\3\4\11\0\1\u0112\20\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\5\4\1\u0113\13\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\10\4\1\u0114"+
    "\10\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\1\u0115\20\4\1\0\23\4\1\0\5\4\6\0\1\u0116"+
    "\2\4\11\0\21\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\21\4\1\0\1\4\1\u0117\21\4\1\0"+
    "\5\4\6\0\3\4\11\0\21\4\1\0\16\4\1\u0118"+
    "\4\4\11\u0119\1\u011a\74\u0119\1\u011b\63\u0119\3\52\1\u011c"+
    "\3\52\1\54\3\52\1\55\4\52\1\0\54\52\30\0"+
    "\1\u011d\45\0\5\4\6\0\3\4\11\0\3\4\1\u011e"+
    "\15\4\1\0\23\4\1\0\5\4\6\0\1\4\1\u011f"+
    "\1\4\11\0\21\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\3\4\1\u0120\15\4\1\0\23\4\1\0"+
    "\5\4\6\0\1\4\1\u0121\1\4\11\0\21\4\1\0"+
    "\23\4\1\0\5\4\6\0\2\4\1\u0122\11\0\21\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\10\4"+
    "\1\u0123\10\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\2\4\1\u0124\16\4\1\0\23\4\1\0\5\4"+
    "\6\0\2\4\1\u0125\11\0\21\4\1\0\23\4\1\0"+
    "\2\4\1\u0126\2\4\6\0\3\4\11\0\21\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\16\4\1\u0127"+
    "\2\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\7\4\1\u0128\11\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\7\4\1\u0129\11\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\2\4\1\u012a\16\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\1\u012b\20\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\5\4"+
    "\1\u012c\13\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\2\4\1\u012d\16\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\16\4\1\u012e\2\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\16\4\1\u012f\2\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\21\4"+
    "\1\0\1\4\1\u0130\21\4\1\0\5\4\6\0\1\4"+
    "\1\u0131\1\4\11\0\21\4\1\0\23\4\1\0\5\4"+
    "\6\0\1\4\1\u0132\1\4\11\0\21\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\3\4\1\u0133\15\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\u0134"+
    "\20\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\21\4\1\0\10\4\1\u0135\12\4\1\0\5\4\6\0"+
    "\3\4\11\0\12\4\1\u0136\6\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\13\4\1\u0137\5\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\5\4\1\u0138"+
    "\13\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\16\4\1\u0139\2\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\21\4\1\0\17\4\1\u013a\3\4\11\u0119"+
    "\1\u013b\63\u0119\11\354\1\u013c\1\6\62\354\7\52\1\54"+
    "\3\52\1\55\3\52\1\u013d\1\0\54\52\62\0\1\u013e"+
    "\13\0\5\4\6\0\3\4\11\0\7\4\1\u013f\11\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\u0140"+
    "\20\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\1\u0141\20\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\16\4\1\u0142\2\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\16\4\1\u0143\2\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\2\4\1\u0144\16\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\4"+
    "\1\u0145\17\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\21\4\1\0\11\4\1\u0146\11\4\1\0\5\4"+
    "\6\0\3\4\11\0\7\4\1\u0147\11\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\16\4\1\u0148\2\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\13\4"+
    "\1\u0149\5\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\16\4\1\u014a\2\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\16\4\1\u014b\2\4\1\0\23\4"+
    "\1\0\5\4\6\0\1\4\1\u014c\1\4\11\0\21\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\1\u014d"+
    "\20\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\14\4\1\u014e\4\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\17\4\1\u014f\1\4\1\0\23\4\1\0"+
    "\5\4\6\0\3\4\11\0\5\4\1\u0150\13\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\16\4\1\u0151"+
    "\2\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\21\4\1\0\20\4\1\u0152\2\4\11\u0119\1\u013b\1\6"+
    "\62\u0119\7\52\1\54\3\52\1\55\3\52\1\u0153\1\0"+
    "\54\52\47\0\1\u0154\26\0\5\4\6\0\3\4\11\0"+
    "\2\4\1\u0155\16\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\21\4\1\0\1\4\1\u0156\21\4\1\0"+
    "\5\4\6\0\3\4\11\0\21\4\1\0\1\4\1\u0157"+
    "\21\4\1\0\5\4\6\0\3\4\11\0\4\4\1\u0158"+
    "\14\4\1\0\23\4\1\0\5\4\6\0\3\4\11\0"+
    "\7\4\1\u0159\11\4\1\0\23\4\1\0\5\4\6\0"+
    "\3\4\11\0\1\u015a\20\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\13\4\1\u015b\5\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\5\4\1\u015c\13\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\3\4"+
    "\1\u015d\15\4\1\0\23\4\7\u0153\1\54\3\u0153\1\u015e"+
    "\4\u0153\1\0\54\u0153\40\0\1\u015f\35\0\5\4\6\0"+
    "\3\4\11\0\1\u0160\20\4\1\0\23\4\1\0\5\4"+
    "\6\0\3\4\11\0\10\4\1\u0161\10\4\1\0\23\4"+
    "\1\0\5\4\6\0\3\4\11\0\14\4\1\u0162\4\4"+
    "\1\0\23\4\1\0\5\4\6\0\1\4\1\u0163\1\4"+
    "\11\0\21\4\1\0\23\4\1\0\5\4\6\0\3\4"+
    "\11\0\13\4\1\u0164\5\4\1\0\23\4\52\0\1\u0165"+
    "\23\0\5\4\6\0\3\4\11\0\1\u0166\20\4\1\0"+
    "\23\4\1\0\5\4\6\0\3\4\11\0\1\u0167\20\4"+
    "\1\0\23\4\1\0\5\4\6\0\3\4\11\0\3\4"+
    "\1\u0168\15\4\1\0\23\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16043];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\4\1\10\11"+
    "\17\1\1\11\4\1\3\0\2\11\2\0\102\1\1\0"+
    "\1\11\1\0\1\11\73\1\2\0\72\1\3\0\51\1"+
    "\5\0\35\1\1\0\1\1\2\0\24\1\2\0\11\1"+
    "\1\11\1\0\5\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 103: 
          { return new Symbol(sym.DOCTYPE, yychar, yyline, yytext());
          }
        case 115: break;
        case 102: 
          { return new Symbol(sym.VERSION, yychar, yyline, yytext());
          }
        case 116: break;
        case 74: 
          { return new Symbol(sym.TABLE_FOOT, yychar, yyline, yytext());
          }
        case 117: break;
        case 92: 
          { return new Symbol(sym.VALIGN, yychar, yyline, yytext());
          }
        case 118: break;
        case 31: 
          { return new Symbol(sym.TABLE_ITEM, yychar, yyline, yytext());
          }
        case 119: break;
        case 26: 
          { return new Symbol(sym.HEADING4, yychar, yyline, yytext());
          }
        case 120: break;
        case 3: 
          { return new Symbol(sym.TEXT, yychar, yyline, yytext());
          }
        case 121: break;
        case 10: 
          { return new Symbol(sym.SEMICOLON, yychar, yyline, yytext());
          }
        case 122: break;
        case 69: 
          { return new Symbol(sym.ERROR_UNTERM_COMMENT, yychar, yyline, yytext());
          }
        case 123: break;
        case 42: 
          { return new Symbol(sym.STRINGDIR, yychar, yyline, yytext());
          }
        case 124: break;
        case 29: 
          { return new Symbol(sym.TABLE_HEADER, yychar, yyline, yytext());
          }
        case 125: break;
        case 14: 
          { return new Symbol(sym.LCBRACE, yychar, yyline, yytext());
          }
        case 126: break;
        case 17: 
          { return new Symbol(sym.ITALIC_FORMATTING, yychar, yyline, yytext());
          }
        case 127: break;
        case 8: 
          { return new Symbol(sym.CLOSE_DECLARATION, yychar, yyline, yytext());
          }
        case 128: break;
        case 45: 
          { return new Symbol(sym.ALTERNATIVE_NAME, yychar, yyline, yytext());
          }
        case 129: break;
        case 110: 
          { return new Symbol(sym.XMLNS_XSI, yychar, yyline, yytext());
          }
        case 130: break;
        case 105: 
          { return new Symbol(sym.ENCODING, yychar, yyline, yytext());
          }
        case 131: break;
        case 70: 
          { return new Symbol(sym.TABLE_HEAD, yychar, yyline, yytext());
          }
        case 132: break;
        case 114: 
          { return new Symbol(sym.IFRAME_FRAMEBORDER, yychar, yyline, yytext());
          }
        case 133: break;
        case 47: 
          { return new Symbol(sym.SOURCE, yychar, yyline, yytext());
          }
        case 134: break;
        case 104: 
          { return new Symbol(sym.TEXTAREA, yychar, yyline, yytext());
          }
        case 135: break;
        case 52: 
          { return new Symbol(sym.REFERENCE, yychar, yyline, yytext());
          }
        case 136: break;
        case 6: 
          { return new Symbol(sym.END_TAG, yychar, yyline, yytext());
          }
        case 137: break;
        case 106: 
          { return new Symbol(sym.XML_LANGUAGE, yychar, yyline, yytext());
          }
        case 138: break;
        case 97: 
          { return new Symbol(sym.CHECKED, yychar, yyline, yytext());
          }
        case 139: break;
        case 11: 
          { return new Symbol(sym.COMA, yychar, yyline, yytext());
          }
        case 140: break;
        case 15: 
          { return new Symbol(sym.RCBRACE, yychar, yyline, yytext());
          }
        case 141: break;
        case 78: 
          { return new Symbol(sym.STYLE, yychar, yyline, yytext());
          }
        case 142: break;
        case 27: 
          { return new Symbol(sym.HEADING5, yychar, yyline, yytext());
          }
        case 143: break;
        case 23: 
          { return new Symbol(sym.HEADING1, yychar, yyline, yytext());
          }
        case 144: break;
        case 5: 
          { return new Symbol(sym.START_TAG, yychar, yyline, yytext());
          }
        case 145: break;
        case 113: 
          { return new Symbol(sym.BLOCKQUOTE, yychar, yyline, yytext());
          }
        case 146: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 147: break;
        case 34: 
          { return new Symbol(sym.LIST_ITEM, yychar, yyline, yytext());
          }
        case 148: break;
        case 75: 
          { return new Symbol(sym.XMLNS, yychar, yyline, yytext());
          }
        case 149: break;
        case 81: 
          { return new Symbol(sym.VALUE, yychar, yyline, yytext());
          }
        case 150: break;
        case 65: 
          { return new Symbol(sym.BODY, yychar, yyline, yytext());
          }
        case 151: break;
        case 19: 
          { return new Symbol(sym.META_DECLARATION, yychar, yyline, yytext());
          }
        case 152: break;
        case 46: 
          { return new Symbol(sym.COLUMN, yychar, yyline, yytext());
          }
        case 153: break;
        case 9: 
          { return new Symbol(sym.EQUALS, yychar, yyline, yytext());
          }
        case 154: break;
        case 33: 
          { return new Symbol(sym.ORDERED_LIST, yychar, yyline, yytext());
          }
        case 155: break;
        case 93: 
          { return new Symbol(sym.HEADERS, yychar, yyline, yytext());
          }
        case 156: break;
        case 56: 
          { return new Symbol(sym.ROWS, yychar, yyline, yytext());
          }
        case 157: break;
        case 89: 
          { return new Symbol(sym.SCRIPT, yychar, yyline, yytext());
          }
        case 158: break;
        case 24: 
          { return new Symbol(sym.HEADING2, yychar, yyline, yytext());
          }
        case 159: break;
        case 87: 
          { return new Symbol(sym.STRONG, yychar, yyline, yytext());
          }
        case 160: break;
        case 68: 
          { return new Symbol(sym.META_DATA, yychar, yyline, yytext());
          }
        case 161: break;
        case 16: 
          { return new Symbol(sym.LINK, yychar, yyline, yytext());
          }
        case 162: break;
        case 108: 
          { return new Symbol(sym.STRINGURL, yychar, yyline, yytext());
          }
        case 163: break;
        case 18: 
          { return new Symbol(sym.BOLD_FORMATTING, yychar, yyline, yytext());
          }
        case 164: break;
        case 98: 
          { return new Symbol(sym.CAPTION, yychar, yyline, yytext());
          }
        case 165: break;
        case 43: 
          { return new Symbol(sym.PRESERVE, yychar, yyline, yytext());
          }
        case 166: break;
        case 73: 
          { return new Symbol(sym.TABLE_BODY, yychar, yyline, yytext());
          }
        case 167: break;
        case 28: 
          { return new Symbol(sym.HEADING6, yychar, yyline, yytext());
          }
        case 168: break;
        case 50: 
          { return new Symbol(sym.HTML, yychar, yyline, yytext());
          }
        case 169: break;
        case 72: 
          { return new Symbol(sym.TITLE, yychar, yyline, yytext());
          }
        case 170: break;
        case 107: 
          { return new Symbol(sym.SELECTED, yychar, yyline, yytext());
          }
        case 171: break;
        case 79: 
          { return new Symbol(sym.SCOPE, yychar, yyline, yytext());
          }
        case 172: break;
        case 22: 
          { return new Symbol(sym.HORIZONTAL_RULE, yychar, yyline, yytext());
          }
        case 173: break;
        case 59: 
          { return new Symbol(sym.CITE, yychar, yyline, yytext());
          }
        case 174: break;
        case 48: 
          { return new Symbol(sym.IMAGE, yychar, yyline, yytext());
          }
        case 175: break;
        case 13: 
          { return new Symbol(sym.RPAR, yychar, yyline, yytext());
          }
        case 176: break;
        case 111: 
          { return new Symbol(sym.ACCESSKEY, yychar, yyline, yytext());
          }
        case 177: break;
        case 30: 
          { return new Symbol(sym.TABLE_ROW, yychar, yyline, yytext());
          }
        case 178: break;
        case 35: 
          { return new Symbol(sym.ID, yychar, yyline, yytext());
          }
        case 179: break;
        case 99: 
          { return new Symbol(sym.COLSPAN, yychar, yyline, yytext());
          }
        case 180: break;
        case 12: 
          { return new Symbol(sym.LPAR, yychar, yyline, yytext());
          }
        case 181: break;
        case 60: 
          { return new Symbol(sym.LANGUAGE, yychar, yyline, yytext());
          }
        case 182: break;
        case 82: 
          { return new Symbol(sym.WIDTH, yychar, yyline, yytext());
          }
        case 183: break;
        case 101: 
          { return new Symbol(sym.SUMMARY, yychar, yyline, yytext());
          }
        case 184: break;
        case 94: 
          { return new Symbol(sym.ENCRIPTION_TYPE, yychar, yyline, yytext());
          }
        case 185: break;
        case 36: 
          { return new Symbol(sym.BREAK, yychar, yyline, yytext());
          }
        case 186: break;
        case 100: 
          { return new Symbol(sym.CONTENT, yychar, yyline, yytext());
          }
        case 187: break;
        case 55: 
          { return new Symbol(sym.ABBR, yychar, yyline, yytext());
          }
        case 188: break;
        case 44: 
          { return new Symbol(sym.XML, yychar, yyline, yytext());
          }
        case 189: break;
        case 83: 
          { return new Symbol(sym.HEIGHT, yychar, yyline, yytext());
          }
        case 190: break;
        case 20: 
          { return new Symbol(sym.ERROR_UNTERM_STRING, yychar, yyline, yytext());
          }
        case 191: break;
        case 66: 
          { return new Symbol(sym.FORM, yychar, yyline, yytext());
          }
        case 192: break;
        case 40: 
          { return new Symbol(sym.UNORDERED_LIST, yychar, yyline, yytext());
          }
        case 193: break;
        case 80: 
          { return new Symbol(sym.INPUT, yychar, yyline, yytext());
          }
        case 194: break;
        case 7: 
          { return new Symbol(sym.PARRAGRAPH, yychar, yyline, yytext());
          }
        case 195: break;
        case 37: 
          { return new Symbol(sym.DEFINITION_LIST_ITEM, yychar, yyline, yytext());
          }
        case 196: break;
        case 84: 
          { return new Symbol(sym.IFRAME_TARGET_LINK, yychar, yyline, yytext());
          }
        case 197: break;
        case 25: 
          { return new Symbol(sym.HEADING3, yychar, yyline, yytext());
          }
        case 198: break;
        case 32: 
          { return new Symbol(sym.EMPHASIS, yychar, yyline, yytext());
          }
        case 199: break;
        case 49: 
          { return new Symbol(sym.BLOCK_LEVEL_SECTION, yychar, yyline, yytext());
          }
        case 200: break;
        case 21: 
          { return new Symbol(sym.STRING, yychar, yyline, yytext());
          }
        case 201: break;
        case 67: 
          { return new Symbol(sym.NAME, yychar, yyline, yytext());
          }
        case 202: break;
        case 53: 
          { return new Symbol(sym.TYPE, yychar, yyline, yytext());
          }
        case 203: break;
        case 85: 
          { return new Symbol(sym.INPUT_ACTION, yychar, yyline, yytext());
          }
        case 204: break;
        case 4: 
          { /* ignore */
          }
        case 205: break;
        case 90: 
          { return new Symbol(sym.IFRAME, yychar, yyline, yytext());
          }
        case 206: break;
        case 41: 
          { return new Symbol(sym.STRINGNUM, yychar, yyline, yytext());
          }
        case 207: break;
        case 91: 
          { return new Symbol(sym.INPUT_METHOD, yychar, yyline, yytext());
          }
        case 208: break;
        case 71: 
          { return new Symbol(sym.TABLE, yychar, yyline, yytext());
          }
        case 209: break;
        case 38: 
          { return new Symbol(sym.DEFINITION_LIST, yychar, yyline, yytext());
          }
        case 210: break;
        case 77: 
          { return new Symbol(sym.CLASS, yychar, yyline, yytext());
          }
        case 211: break;
        case 112: 
          { return new Symbol(sym.HTTP_EQUIVALENT, yychar, yyline, yytext());
          }
        case 212: break;
        case 64: 
          { return new Symbol(sym.DEFAULT_ADDRESS, yychar, yyline, yytext());
          }
        case 213: break;
        case 54: 
          { return new Symbol(sym.AXIS, yychar, yyline, yytext());
          }
        case 214: break;
        case 76: 
          { return new Symbol(sym.ALIGN, yychar, yyline, yytext());
          }
        case 215: break;
        case 109: 
          { return new Symbol(sym.XML_SPACE, yychar, yyline, yytext());
          }
        case 216: break;
        case 86: 
          { return new Symbol(sym.OPTION, yychar, yyline, yytext());
          }
        case 217: break;
        case 62: 
          { return new Symbol(sym.BLOCK_LEVEL_INLINE, yychar, yyline, yytext());
          }
        case 218: break;
        case 88: 
          { return new Symbol(sym.SELECT, yychar, yyline, yytext());
          }
        case 219: break;
        case 51: 
          { return new Symbol(sym.HEAD, yychar, yyline, yytext());
          }
        case 220: break;
        case 58: 
          { return new Symbol(sym.CODEF, yychar, yyline, yytext());
          }
        case 221: break;
        case 39: 
          { return new Symbol(sym.DEFINITION_LIST_DESCRIPTION, yychar, yyline, yytext());
          }
        case 222: break;
        case 96: 
          { return new Symbol(sym.ROWSPAN, yychar, yyline, yytext());
          }
        case 223: break;
        case 63: 
          { return new Symbol(sym.SIZE, yychar, yyline, yytext());
          }
        case 224: break;
        case 57: 
          { return new Symbol(sym.COLUMNS, yychar, yyline, yytext());
          }
        case 225: break;
        case 2: 
          { return new Symbol(sym.NUMBER, yychar, yyline, yytext());
          }
        case 226: break;
        case 95: 
          { return new Symbol(sym.ADDRESS, yychar, yyline, yytext());
          }
        case 227: break;
        case 61: 
          { return new Symbol(sym.DOCUMENT_EXTERNALSOURCE_LINK, yychar, yyline, yytext());
          }
        case 228: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
